/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_vue_node_modules_jcanvas_dist_jcanvas_js"],{

/***/ "./resources/js/vue/node_modules/jcanvas/dist/jcanvas.js":
/*!***************************************************************!*\
  !*** ./resources/js/vue/node_modules/jcanvas/dist/jcanvas.js ***!
  \***************************************************************/
/***/ (function(module) {

eval("/**\n * @license jCanvas v21.0.1\n * Copyright 2017 Caleb Evans\n * Released under the MIT license\n */\n(function (jQuery, global, factory) {\n\t'use strict';\n\n\tif ( true && typeof module.exports === 'object') {\n\t\tmodule.exports = function (jQuery, w) {\n\t\t\treturn factory(jQuery, w);\n\t\t};\n\t} else {\n\t\tfactory(jQuery, global);\n\t}\n\n// Pass this if window is not defined yet\n}(typeof window !== 'undefined' ? window.jQuery : {}, typeof window !== 'undefined' ? window : this, function ($, window) {\n'use strict';\n\nvar document = window.document,\n\tImage = window.Image,\n\tArray = window.Array,\n\tgetComputedStyle = window.getComputedStyle,\n\tMath = window.Math,\n\tNumber = window.Number,\n\tparseFloat = window.parseFloat;\n\n// Define local aliases to frequently used properties\nvar defaults,\n\t// Aliases to jQuery methods\n\textendObject = $.extend,\n\tinArray = $.inArray,\n\ttypeOf = function (operand) {\n\t\treturn Object.prototype.toString.call(operand)\n\t\t\t.slice(8, -1).toLowerCase();\n\t},\n\tisPlainObject = $.isPlainObject,\n\t// Math constants and functions\n\tPI = Math.PI,\n\tround = Math.round,\n\tabs = Math.abs,\n\tsin = Math.sin,\n\tcos = Math.cos,\n\tatan2 = Math.atan2,\n\t// The Array slice() method\n\tarraySlice = Array.prototype.slice,\n\t// jQuery's internal event normalization function\n\tjQueryEventFix = $.event.fix,\n\t// Object for storing a number of internal property maps\n\tmaps = {},\n\t// jQuery internal caches\n\tcaches = {\n\t\tdataCache: {},\n\t\tpropCache: {},\n\t\timageCache: {}\n\t},\n\t// Base transformations\n\tbaseTransforms = {\n\t\trotate: 0,\n\t\tscaleX: 1,\n\t\tscaleY: 1,\n\t\ttranslateX: 0,\n\t\ttranslateY: 0,\n\t\t// Store all previous masks\n\t\tmasks: []\n\t},\n\t// Object for storing CSS-related properties\n\tcss = {},\n\ttangibleEvents = [\n\t\t'mousedown',\n\t\t'mousemove',\n\t\t'mouseup',\n\t\t'mouseover',\n\t\t'mouseout',\n\t\t'touchstart',\n\t\t'touchmove',\n\t\t'touchend'\n\t];\n\n// Constructor for creating objects that inherit from jCanvas preferences and defaults\nfunction jCanvasObject(args) {\n\tvar params = this,\n\t\tpropName;\n\t// Copy the given parameters into new object\n\tfor (propName in args) {\n\t\t// Do not merge defaults into parameters\n\t\tif (Object.prototype.hasOwnProperty.call(args, propName)) {\n\t\t\tparams[propName] = args[propName];\n\t\t}\n\t}\n\treturn params;\n}\n\n// jCanvas object in which global settings are other data are stored\nvar jCanvas = {\n\t// Events object for storing jCanvas event initiation functions\n\tevents: {},\n\t// Object containing all jCanvas event hooks\n\teventHooks: {},\n\t// Settings for enabling future jCanvas features\n\tfuture: {}\n};\n\n// jCanvas default property values\nfunction jCanvasDefaults() {\n\textendObject(this, jCanvasDefaults.baseDefaults);\n}\njCanvasDefaults.baseDefaults = {\n\talign: 'center',\n\tarrowAngle: 90,\n\tarrowRadius: 0,\n\tautosave: true,\n\tbaseline: 'middle',\n\tbringToFront: false,\n\tccw: false,\n\tclosed: false,\n\tcompositing: 'source-over',\n\tconcavity: 0,\n\tcornerRadius: 0,\n\tcount: 1,\n\tcropFromCenter: true,\n\tcrossOrigin: null,\n\tcursors: null,\n\tdisableEvents: false,\n\tdraggable: false,\n\tdragGroups: null,\n\tgroups: null,\n\tdata: null,\n\tdx: null,\n\tdy: null,\n\tend: 360,\n\teventX: null,\n\teventY: null,\n\tfillStyle: 'transparent',\n\tfontStyle: 'normal',\n\tfontSize: '12pt',\n\tfontFamily: 'sans-serif',\n\tfromCenter: true,\n\theight: null,\n\timageSmoothing: true,\n\tinDegrees: true,\n\tintangible: false,\n\tindex: null,\n\tletterSpacing: null,\n\tlineHeight: 1,\n\tlayer: false,\n\tmask: false,\n\tmaxWidth: null,\n\tmiterLimit: 10,\n\tname: null,\n\topacity: 1,\n\tr1: null,\n\tr2: null,\n\tradius: 0,\n\trepeat: 'repeat',\n\trespectAlign: false,\n\trestrictDragToAxis: null,\n\trotate: 0,\n\trounded: false,\n\tscale: 1,\n\tscaleX: 1,\n\tscaleY: 1,\n\tshadowBlur: 0,\n\tshadowColor: 'transparent',\n\tshadowStroke: false,\n\tshadowX: 0,\n\tshadowY: 0,\n\tsHeight: null,\n\tsides: 0,\n\tsource: '',\n\tspread: 0,\n\tstart: 0,\n\tstrokeCap: 'butt',\n\tstrokeDash: null,\n\tstrokeDashOffset: 0,\n\tstrokeJoin: 'miter',\n\tstrokeStyle: 'transparent',\n\tstrokeWidth: 1,\n\tsWidth: null,\n\tsx: null,\n\tsy: null,\n\ttext: '',\n\ttranslate: 0,\n\ttranslateX: 0,\n\ttranslateY: 0,\n\ttype: null,\n\tvisible: true,\n\twidth: null,\n\tx: 0,\n\ty: 0\n};\ndefaults = new jCanvasDefaults();\njCanvasObject.prototype = defaults;\n\n/* Internal helper methods */\n\n// Determines if the given operand is a string\nfunction isString(operand) {\n\treturn (typeOf(operand) === 'string');\n}\n\n// Determines if the given operand is a function\nfunction isFunction(operand) {\n\treturn (typeOf(operand) === 'function');\n}\n\n// Determines if the given operand is numeric\nfunction isNumeric(operand) {\n\treturn !isNaN(Number(operand)) && !isNaN(parseFloat(operand));\n}\n\n// Get 2D context for the given canvas\nfunction _getContext(canvas) {\n\treturn (canvas && canvas.getContext ? canvas.getContext('2d') : null);\n}\n\n// Coerce designated number properties from strings to numbers\nfunction _coerceNumericProps(props) {\n\tvar propName, propType, propValue;\n\t// Loop through all properties in given property map\n\tfor (propName in props) {\n\t\tif (Object.prototype.hasOwnProperty.call(props, propName)) {\n\t\t\tpropValue = props[propName];\n\t\t\tpropType = typeOf(propValue);\n\t\t\t// If property is non-empty string and value is numeric\n\t\t\tif (propType === 'string' && isNumeric(propValue) && propName !== 'text') {\n\t\t\t\t// Convert value to number\n\t\t\t\tprops[propName] = parseFloat(propValue);\n\t\t\t}\n\t\t}\n\t}\n\t// Ensure value of text property is always a string\n\tif (props.text !== undefined) {\n\t\tprops.text = String(props.text);\n\t}\n}\n\n// Clone the given transformations object\nfunction _cloneTransforms(transforms) {\n\t// Clone the object itself\n\ttransforms = extendObject({}, transforms);\n\t// Clone the object's masks array\n\ttransforms.masks = transforms.masks.slice(0);\n\treturn transforms;\n}\n\n// Save canvas context and update transformation stack\nfunction _saveCanvas(ctx, data) {\n\tvar transforms;\n\tctx.save();\n\ttransforms = _cloneTransforms(data.transforms);\n\tdata.savedTransforms.push(transforms);\n}\n\n// Restore canvas context update transformation stack\nfunction _restoreCanvas(ctx, data) {\n\tif (data.savedTransforms.length === 0) {\n\t\t// Reset transformation state if it can't be restored any more\n\t\tdata.transforms = _cloneTransforms(baseTransforms);\n\t} else {\n\t\t// Restore canvas context\n\t\tctx.restore();\n\t\t// Restore current transform state to the last saved state\n\t\tdata.transforms = data.savedTransforms.pop();\n\t}\n}\n\n// Set the style with the given name\nfunction _setStyle(canvas, ctx, params, styleName) {\n\tif (params[styleName]) {\n\t\tif (isFunction(params[styleName])) {\n\t\t\t// Handle functions\n\t\t\tctx[styleName] = params[styleName].call(canvas, params);\n\t\t} else {\n\t\t\t// Handle string values\n\t\t\tctx[styleName] = params[styleName];\n\t\t}\n\t}\n}\n\n// Set canvas context properties\nfunction _setGlobalProps(canvas, ctx, params) {\n\t_setStyle(canvas, ctx, params, 'fillStyle');\n\t_setStyle(canvas, ctx, params, 'strokeStyle');\n\tctx.lineWidth = params.strokeWidth;\n\t// Optionally round corners for paths\n\tif (params.rounded) {\n\t\tctx.lineCap = ctx.lineJoin = 'round';\n\t} else {\n\t\tctx.lineCap = params.strokeCap;\n\t\tctx.lineJoin = params.strokeJoin;\n\t\tctx.miterLimit = params.miterLimit;\n\t}\n\t// Reset strokeDash if null\n\tif (!params.strokeDash) {\n\t\tparams.strokeDash = [];\n\t}\n\t// Dashed lines\n\tif (ctx.setLineDash) {\n\t\tctx.setLineDash(params.strokeDash);\n\t}\n\tctx.webkitLineDash = params.strokeDash;\n\tctx.lineDashOffset = ctx.webkitLineDashOffset = ctx.mozDashOffset = params.strokeDashOffset;\n\t// Drop shadow\n\tctx.shadowOffsetX = params.shadowX;\n\tctx.shadowOffsetY = params.shadowY;\n\tctx.shadowBlur = params.shadowBlur;\n\tctx.shadowColor = params.shadowColor;\n\t// Opacity and composite operation\n\tctx.globalAlpha = params.opacity;\n\tctx.globalCompositeOperation = params.compositing;\n\t// Support cross-browser toggling of image smoothing\n\tif (params.imageSmoothing) {\n\t\tctx.imageSmoothingEnabled = params.imageSmoothing;\n\t}\n}\n\n// Optionally enable masking support for this path\nfunction _enableMasking(ctx, data, params) {\n\tif (params.mask) {\n\t\t// If jCanvas autosave is enabled\n\t\tif (params.autosave) {\n\t\t\t// Automatically save transformation state by default\n\t\t\t_saveCanvas(ctx, data);\n\t\t}\n\t\t// Clip the current path\n\t\tctx.clip();\n\t\t// Keep track of current masks\n\t\tdata.transforms.masks.push(params._args);\n\t}\n}\n\n// Restore individual shape transformation\nfunction _restoreTransform(ctx, params) {\n\t// If shape has been transformed by jCanvas\n\tif (params._transformed) {\n\t\t// Restore canvas context\n\t\tctx.restore();\n\t}\n}\n\n// Close current canvas path\nfunction _closePath(canvas, ctx, params) {\n\tvar data;\n\n\t// Optionally close path\n\tif (params.closed) {\n\t\tctx.closePath();\n\t}\n\n\tif (params.shadowStroke && params.strokeWidth !== 0) {\n\t\t// Extend the shadow to include the stroke of a drawing\n\n\t\t// Add a stroke shadow by stroking before filling\n\t\tctx.stroke();\n\t\tctx.fill();\n\t\t// Ensure the below stroking does not inherit a shadow\n\t\tctx.shadowColor = 'transparent';\n\t\tctx.shadowBlur = 0;\n\t\t// Stroke over fill as usual\n\t\tctx.stroke();\n\n\t} else {\n\t\t// If shadowStroke is not enabled, stroke & fill as usual\n\n\t\tctx.fill();\n\t\t// Prevent extra shadow created by stroke (but only when fill is present)\n\t\tif (params.fillStyle !== 'transparent') {\n\t\t\tctx.shadowColor = 'transparent';\n\t\t}\n\t\tif (params.strokeWidth !== 0) {\n\t\t\t// Only stroke if the stroke is not 0\n\t\t\tctx.stroke();\n\t\t}\n\n\t}\n\n\t// Optionally close path\n\tif (!params.closed) {\n\t\tctx.closePath();\n\t}\n\n\t// Restore individual shape transformation\n\t_restoreTransform(ctx, params);\n\n\t// Mask shape if chosen\n\tif (params.mask) {\n\t\t// Retrieve canvas data\n\t\tdata = _getCanvasData(canvas);\n\t\t_enableMasking(ctx, data, params);\n\t}\n\n}\n\n// Transform (translate, scale, or rotate) shape\nfunction _transformShape(canvas, ctx, params, width, height) {\n\n\t// Get conversion factor for radians\n\tparams._toRad = (params.inDegrees ? (PI / 180) : 1);\n\n\tparams._transformed = true;\n\tctx.save();\n\n\t// Optionally measure (x, y) position from top-left corner\n\tif (!params.fromCenter && !params._centered && width !== undefined) {\n\t\t// Always draw from center unless otherwise specified\n\t\tif (height === undefined) {\n\t\t\theight = width;\n\t\t}\n\t\tparams.x += width / 2;\n\t\tparams.y += height / 2;\n\t\tparams._centered = true;\n\t}\n\t// Optionally rotate shape\n\tif (params.rotate) {\n\t\t_rotateCanvas(ctx, params, null);\n\t}\n\t// Optionally scale shape\n\tif (params.scale !== 1 || params.scaleX !== 1 || params.scaleY !== 1) {\n\t\t_scaleCanvas(ctx, params, null);\n\t}\n\t// Optionally translate shape\n\tif (params.translate || params.translateX || params.translateY) {\n\t\t_translateCanvas(ctx, params, null);\n\t}\n\n}\n\n/* Plugin API */\n\n// Extend jCanvas with a user-defined method\njCanvas.extend = function extend(plugin) {\n\n\t// Create plugin\n\tif (plugin.name) {\n\t\t// Merge properties with defaults\n\t\tif (plugin.props) {\n\t\t\textendObject(defaults, plugin.props);\n\t\t}\n\t\t// Define plugin method\n\t\t$.fn[plugin.name] = function self(args) {\n\t\t\tvar $canvases = this, canvas, e, ctx,\n\t\t\t\tparams;\n\n\t\t\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t\t\tcanvas = $canvases[e];\n\t\t\t\tctx = _getContext(canvas);\n\t\t\t\tif (ctx) {\n\n\t\t\t\t\tparams = new jCanvasObject(args);\n\t\t\t\t\t_addLayer(canvas, params, args, self);\n\n\t\t\t\t\t_setGlobalProps(canvas, ctx, params);\n\t\t\t\t\tplugin.fn.call(canvas, ctx, params);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $canvases;\n\t\t};\n\t\t// Add drawing type to drawing map\n\t\tif (plugin.type) {\n\t\t\tmaps.drawings[plugin.type] = plugin.name;\n\t\t}\n\t}\n\treturn $.fn[plugin.name];\n};\n\n/* Layer API */\n\n// Retrieved the stored jCanvas data for a canvas element\nfunction _getCanvasData(canvas) {\n\tvar dataCache = caches.dataCache, data;\n\tif (dataCache._canvas === canvas && dataCache._data) {\n\n\t\t// Retrieve canvas data from cache if possible\n\t\tdata = dataCache._data;\n\n\t} else {\n\n\t\t// Retrieve canvas data from jQuery's internal data storage\n\t\tdata = $.data(canvas, 'jCanvas');\n\t\tif (!data) {\n\n\t\t\t// Create canvas data object if it does not already exist\n\t\t\tdata = {\n\t\t\t\t// The associated canvas element\n\t\t\t\tcanvas: canvas,\n\t\t\t\t// Layers array\n\t\t\t\tlayers: [],\n\t\t\t\t// Layer maps\n\t\t\t\tlayer: {\n\t\t\t\t\tnames: {},\n\t\t\t\t\tgroups: {}\n\t\t\t\t},\n\t\t\t\teventHooks: {},\n\t\t\t\t// All layers that intersect with the event coordinates (regardless of visibility)\n\t\t\t\tintersecting: [],\n\t\t\t\t// The topmost layer whose area contains the event coordinates\n\t\t\t\tlastIntersected: null,\n\t\t\t\tcursor: $(canvas).css('cursor'),\n\t\t\t\t// Properties for the current drag event\n\t\t\t\tdrag: {\n\t\t\t\t\tlayer: null,\n\t\t\t\t\tdragging: false\n\t\t\t\t},\n\t\t\t\t// Data for the current event\n\t\t\t\tevent: {\n\t\t\t\t\ttype: null,\n\t\t\t\t\tx: null,\n\t\t\t\t\ty: null\n\t\t\t\t},\n\t\t\t\t// Events which already have been bound to the canvas\n\t\t\t\tevents: {},\n\t\t\t\t// The canvas's current transformation state\n\t\t\t\ttransforms: _cloneTransforms(baseTransforms),\n\t\t\t\tsavedTransforms: [],\n\t\t\t\t// Whether a layer is being animated or not\n\t\t\t\tanimating: false,\n\t\t\t\t// The layer currently being animated\n\t\t\t\tanimated: null,\n\t\t\t\t// The device pixel ratio\n\t\t\t\tpixelRatio: 1,\n\t\t\t\t// Whether pixel ratio transformations have been applied\n\t\t\t\tscaled: false,\n\t\t\t\t// Whether the canvas should be redrawn when a layer mousemove\n\t\t\t\t// event triggers (either directly, or indirectly via dragging)\n\t\t\t\tredrawOnMousemove: false\n\t\t\t};\n\t\t\t// Use jQuery to store canvas data\n\t\t\t$.data(canvas, 'jCanvas', data);\n\n\t\t}\n\t\t// Cache canvas data for faster retrieval\n\t\tdataCache._canvas = canvas;\n\t\tdataCache._data = data;\n\n\t}\n\treturn data;\n}\n\n// Initialize all of a layer's associated jCanvas events\nfunction _addLayerEvents($canvas, data, layer) {\n\tvar eventName;\n\t// Determine which jCanvas events need to be bound to this layer\n\tfor (eventName in jCanvas.events) {\n\t\tif (Object.prototype.hasOwnProperty.call(jCanvas.events, eventName)) {\n\t\t\t// If layer has callback function to complement it\n\t\t\tif (layer[eventName] || (layer.cursors && layer.cursors[eventName])) {\n\t\t\t\t// Bind event to layer\n\t\t\t\t_addExplicitLayerEvent($canvas, data, layer, eventName);\n\t\t\t}\n\t\t}\n\t}\n\tif (!data.events.mouseout) {\n\t\t$canvas.bind('mouseout.jCanvas', function () {\n\t\t\t// Retrieve the layer whose drag event was canceled\n\t\t\tvar layer = data.drag.layer, l;\n\t\t\t// If cursor mouses out of canvas while dragging\n\t\t\tif (layer) {\n\t\t\t\t// Cancel drag\n\t\t\t\tdata.drag = {};\n\t\t\t\t_triggerLayerEvent($canvas, data, layer, 'dragcancel');\n\t\t\t}\n\t\t\t// Loop through all layers\n\t\t\tfor (l = 0; l < data.layers.length; l += 1) {\n\t\t\t\tlayer = data.layers[l];\n\t\t\t\t// If layer thinks it's still being moused over\n\t\t\t\tif (layer._hovered) {\n\t\t\t\t\t// Trigger mouseout on layer\n\t\t\t\t\t$canvas.triggerLayerEvent(data.layers[l], 'mouseout');\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Redraw layers\n\t\t\t$canvas.drawLayers();\n\t\t});\n\t\t// Indicate that an event handler has been bound\n\t\tdata.events.mouseout = true;\n\t}\n}\n\n// Initialize the given event on the given layer\nfunction _addLayerEvent($canvas, data, layer, eventName) {\n\t// Use touch events if appropriate\n\t// eventName = _getMouseEventName(eventName);\n\t// Bind event to layer\n\tjCanvas.events[eventName]($canvas, data);\n\tlayer._event = true;\n}\n\n// Add a layer event that was explicitly declared in the layer's parameter map,\n// excluding events added implicitly (e.g. mousemove event required by draggable\n// layers)\nfunction _addExplicitLayerEvent($canvas, data, layer, eventName) {\n\t_addLayerEvent($canvas, data, layer, eventName);\n\tif (eventName === 'mouseover' || eventName === 'mouseout' || eventName === 'mousemove') {\n\t\tdata.redrawOnMousemove = true;\n\t}\n}\n\n// Enable drag support for this layer\nfunction _enableDrag($canvas, data, layer) {\n\tvar dragHelperEvents, eventName, i;\n\t// Only make layer draggable if necessary\n\tif (layer.draggable || layer.cursors) {\n\n\t\t// Organize helper events which enable drag support\n\t\tdragHelperEvents = ['mousedown', 'mousemove', 'mouseup'];\n\n\t\t// Bind each helper event to the canvas\n\t\tfor (i = 0; i < dragHelperEvents.length; i += 1) {\n\t\t\t// Use touch events if appropriate\n\t\t\teventName = dragHelperEvents[i];\n\t\t\t// Bind event\n\t\t\t_addLayerEvent($canvas, data, layer, eventName);\n\t\t}\n\t\t// Indicate that this layer has events bound to it\n\t\tlayer._event = true;\n\n\t}\n}\n\n// Update a layer property map if property is changed\nfunction _updateLayerName($canvas, data, layer, props) {\n\tvar nameMap = data.layer.names;\n\n\t// If layer name is being added, not changed\n\tif (!props) {\n\n\t\tprops = layer;\n\n\t} else {\n\n\t\t// Remove old layer name entry because layer name has changed\n\t\tif (props.name !== undefined && isString(layer.name) && layer.name !== props.name) {\n\t\t\tdelete nameMap[layer.name];\n\t\t}\n\n\t}\n\n\t// Add new entry to layer name map with new name\n\tif (isString(props.name)) {\n\t\tnameMap[props.name] = layer;\n\t}\n}\n\n// Create or update the data map for the given layer and group type\nfunction _updateLayerGroups($canvas, data, layer, props) {\n\tvar groupMap = data.layer.groups,\n\t\tgroup, groupName, g,\n\t\tindex, l;\n\n\t// If group name is not changing\n\tif (!props) {\n\n\t\tprops = layer;\n\n\t} else {\n\n\t\t// Remove layer from all of its associated groups\n\t\tif (props.groups !== undefined && layer.groups !== null) {\n\t\t\tfor (g = 0; g < layer.groups.length; g += 1) {\n\t\t\t\tgroupName = layer.groups[g];\n\t\t\t\tgroup = groupMap[groupName];\n\t\t\t\tif (group) {\n\t\t\t\t\t// Remove layer from its old layer group entry\n\t\t\t\t\tfor (l = 0; l < group.length; l += 1) {\n\t\t\t\t\t\tif (group[l] === layer) {\n\t\t\t\t\t\t\t// Keep track of the layer's initial index\n\t\t\t\t\t\t\tindex = l;\n\t\t\t\t\t\t\t// Remove layer once found\n\t\t\t\t\t\t\tgroup.splice(l, 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Remove layer group entry if group is empty\n\t\t\t\t\tif (group.length === 0) {\n\t\t\t\t\t\tdelete groupMap[groupName];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Add layer to new group if a new group name is given\n\tif (props.groups !== undefined && props.groups !== null) {\n\n\t\tfor (g = 0; g < props.groups.length; g += 1) {\n\n\t\t\tgroupName = props.groups[g];\n\n\t\t\tgroup = groupMap[groupName];\n\t\t\tif (!group) {\n\t\t\t\t// Create new group entry if it doesn't exist\n\t\t\t\tgroup = groupMap[groupName] = [];\n\t\t\t\tgroup.name = groupName;\n\t\t\t}\n\t\t\tif (index === undefined) {\n\t\t\t\t// Add layer to end of group unless otherwise stated\n\t\t\t\tindex = group.length;\n\t\t\t}\n\t\t\t// Add layer to its new layer group\n\t\t\tgroup.splice(index, 0, layer);\n\n\t\t}\n\n\t}\n}\n\n// Get event hooks object for the first selected canvas\n$.fn.getEventHooks = function getEventHooks() {\n\tvar $canvases = this, canvas, data,\n\t\teventHooks = {};\n\n\tif ($canvases.length !== 0) {\n\t\tcanvas = $canvases[0];\n\t\tdata = _getCanvasData(canvas);\n\t\teventHooks = data.eventHooks;\n\t}\n\treturn eventHooks;\n};\n\n// Set event hooks for the selected canvases\n$.fn.setEventHooks = function setEventHooks(eventHooks) {\n\tvar $canvases = this, e,\n\t\tdata;\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tdata = _getCanvasData($canvases[e]);\n\t\textendObject(data.eventHooks, eventHooks);\n\t}\n\treturn $canvases;\n};\n\n// Get jCanvas layers array\n$.fn.getLayers = function getLayers(callback) {\n\tvar $canvases = this, canvas, data,\n\t\tlayers, layer, l,\n\t\tmatching = [];\n\n\tif ($canvases.length !== 0) {\n\n\t\tcanvas = $canvases[0];\n\t\tdata = _getCanvasData(canvas);\n\t\t// Retrieve layers array for this canvas\n\t\tlayers = data.layers;\n\n\t\t// If a callback function is given\n\t\tif (isFunction(callback)) {\n\n\t\t\t// Filter the layers array using the callback\n\t\t\tfor (l = 0; l < layers.length; l += 1) {\n\t\t\t\tlayer = layers[l];\n\t\t\t\tif (callback.call(canvas, layer)) {\n\t\t\t\t\t// Add layer to array of matching layers if test passes\n\t\t\t\t\tmatching.push(layer);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\t// Otherwise, get all layers\n\n\t\t\tmatching = layers;\n\n\t\t}\n\n\t}\n\treturn matching;\n};\n\n// Get a single jCanvas layer object\n$.fn.getLayer = function getLayer(layerId) {\n\tvar $canvases = this, canvas,\n\t\tdata, layers, layer, l,\n\t\tidType;\n\n\tif ($canvases.length !== 0) {\n\n\t\tcanvas = $canvases[0];\n\t\tdata = _getCanvasData(canvas);\n\t\tlayers = data.layers;\n\t\tidType = typeOf(layerId);\n\n\t\tif (layerId && layerId.layer) {\n\n\t\t\t// Return the actual layer object if given\n\t\t\tlayer = layerId;\n\n\t\t} else if (idType === 'number') {\n\n\t\t\t// Retrieve the layer using the given index\n\n\t\t\t// Allow for negative indices\n\t\t\tif (layerId < 0) {\n\t\t\t\tlayerId = layers.length + layerId;\n\t\t\t}\n\t\t\t// Get layer with the given index\n\t\t\tlayer = layers[layerId];\n\n\t\t} else if (idType === 'regexp') {\n\n\t\t\t// Get layer with the name that matches the given regex\n\t\t\tfor (l = 0; l < layers.length; l += 1) {\n\t\t\t\t// Check if layer matches name\n\t\t\t\tif (isString(layers[l].name) && layers[l].name.match(layerId)) {\n\t\t\t\t\tlayer = layers[l];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Get layer with the given name\n\t\t\tlayer = data.layer.names[layerId];\n\n\t\t}\n\n\t}\n\treturn layer;\n};\n\n// Get all layers in the given group\n$.fn.getLayerGroup = function getLayerGroup(groupId) {\n\tvar $canvases = this, canvas, data,\n\t\tgroups, groupName, group,\n\t\tidType = typeOf(groupId);\n\n\tif ($canvases.length !== 0) {\n\n\t\tcanvas = $canvases[0];\n\n\t\tif (idType === 'array') {\n\n\t\t\t// Return layer group if given\n\t\t\tgroup = groupId;\n\n\t\t} else if (idType === 'regexp') {\n\n\t\t\t// Get canvas data\n\t\t\tdata = _getCanvasData(canvas);\n\t\t\tgroups = data.layer.groups;\n\t\t\t// Loop through all layers groups for this canvas\n\t\t\tfor (groupName in groups) {\n\t\t\t\t// Find a group whose name matches the given regex\n\t\t\t\tif (groupName.match(groupId)) {\n\t\t\t\t\tgroup = groups[groupName];\n\t\t\t\t\t// Stop after finding the first matching group\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Find layer group with the given group name\n\t\t\tdata = _getCanvasData(canvas);\n\t\t\tgroup = data.layer.groups[groupId];\n\t\t}\n\n\t}\n\treturn group;\n};\n\n// Get index of layer in layers array\n$.fn.getLayerIndex = function getLayerIndex(layerId) {\n\tvar $canvases = this,\n\t\tlayers = $canvases.getLayers(),\n\t\tlayer = $canvases.getLayer(layerId);\n\n\treturn inArray(layer, layers);\n};\n\n// Set properties of a layer\n$.fn.setLayer = function setLayer(layerId, props) {\n\tvar $canvases = this, $canvas, e,\n\t\tdata, layer,\n\t\tpropName, propValue, propType;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tdata = _getCanvasData($canvases[e]);\n\n\t\tlayer = $($canvases[e]).getLayer(layerId);\n\t\tif (layer) {\n\n\t\t\t// Update layer property maps\n\t\t\t_updateLayerName($canvas, data, layer, props);\n\t\t\t_updateLayerGroups($canvas, data, layer, props);\n\n\t\t\t_coerceNumericProps(props);\n\n\t\t\t// Merge properties with layer\n\t\t\tfor (propName in props) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(props, propName)) {\n\t\t\t\t\tpropValue = props[propName];\n\t\t\t\t\tpropType = typeOf(propValue);\n\t\t\t\t\tif (propType === 'object' && isPlainObject(propValue)) {\n\t\t\t\t\t\t// Clone objects\n\t\t\t\t\t\tlayer[propName] = extendObject({}, propValue);\n\t\t\t\t\t\t_coerceNumericProps(layer[propName]);\n\t\t\t\t\t} else if (propType === 'array') {\n\t\t\t\t\t\t// Clone arrays\n\t\t\t\t\t\tlayer[propName] = propValue.slice(0);\n\t\t\t\t\t} else if (propType === 'string') {\n\t\t\t\t\t\tif (propValue.indexOf('+=') === 0) {\n\t\t\t\t\t\t\t// Increment numbers prefixed with +=\n\t\t\t\t\t\t\tlayer[propName] += parseFloat(propValue.substr(2));\n\t\t\t\t\t\t} else if (propValue.indexOf('-=') === 0) {\n\t\t\t\t\t\t\t// Decrement numbers prefixed with -=\n\t\t\t\t\t\t\tlayer[propName] -= parseFloat(propValue.substr(2));\n\t\t\t\t\t\t} else if (!isNaN(propValue) && isNumeric(propValue) && propName !== 'text') {\n\t\t\t\t\t\t\t// Convert numeric values as strings to numbers\n\t\t\t\t\t\t\tlayer[propName] = parseFloat(propValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Otherwise, set given string value\n\t\t\t\t\t\t\tlayer[propName] = propValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Otherwise, set given value\n\t\t\t\t\t\tlayer[propName] = propValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update layer events\n\t\t\t_addLayerEvents($canvas, data, layer);\n\t\t\t_enableDrag($canvas, data, layer);\n\n\t\t\t// If layer's properties were changed\n\t\t\tif ($.isEmptyObject(props) === false) {\n\t\t\t\t_triggerLayerEvent($canvas, data, layer, 'change', props);\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Set properties of all layers (optionally filtered by a callback)\n$.fn.setLayers = function setLayers(props, callback) {\n\tvar $canvases = this, $canvas, e,\n\t\tlayers, l;\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\n\t\tlayers = $canvas.getLayers(callback);\n\t\t// Loop through all layers\n\t\tfor (l = 0; l < layers.length; l += 1) {\n\t\t\t// Set properties of each layer\n\t\t\t$canvas.setLayer(layers[l], props);\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Set properties of all layers in the given group\n$.fn.setLayerGroup = function setLayerGroup(groupId, props) {\n\tvar $canvases = this, $canvas, e,\n\t\tgroup, l;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t// Get layer group\n\t\t$canvas = $($canvases[e]);\n\n\t\tgroup = $canvas.getLayerGroup(groupId);\n\t\t// If group exists\n\t\tif (group) {\n\n\t\t\t// Loop through layers in group\n\t\t\tfor (l = 0; l < group.length; l += 1) {\n\t\t\t\t// Merge given properties with layer\n\t\t\t\t$canvas.setLayer(group[l], props);\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Move a layer to the given index in the layers array\n$.fn.moveLayer = function moveLayer(layerId, index) {\n\tvar $canvases = this, $canvas, e,\n\t\tdata, layers, layer;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t// Retrieve layers array and desired layer\n\t\tlayers = data.layers;\n\t\tlayer = $canvas.getLayer(layerId);\n\t\tif (layer) {\n\n\t\t\t// Ensure layer index is accurate\n\t\t\tlayer.index = inArray(layer, layers);\n\n\t\t\t// Remove layer from its current placement\n\t\t\tlayers.splice(layer.index, 1);\n\t\t\t// Add layer in its new placement\n\t\t\tlayers.splice(index, 0, layer);\n\n\t\t\t// Handle negative indices\n\t\t\tif (index < 0) {\n\t\t\t\tindex = layers.length + index;\n\t\t\t}\n\t\t\t// Update layer's stored index\n\t\t\tlayer.index = index;\n\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'move');\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Remove a jCanvas layer\n$.fn.removeLayer = function removeLayer(layerId) {\n\tvar $canvases = this, $canvas, e, data,\n\t\tlayers, layer;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t// Retrieve layers array and desired layer\n\t\tlayers = $canvas.getLayers();\n\t\tlayer = $canvas.getLayer(layerId);\n\t\t// Remove layer if found\n\t\tif (layer) {\n\n\t\t\t// Ensure layer index is accurate\n\t\t\tlayer.index = inArray(layer, layers);\n\t\t\t// Remove layer and allow it to be re-added later\n\t\t\tlayers.splice(layer.index, 1);\n\t\t\tdelete layer._layer;\n\n\t\t\t// Update layer name map\n\t\t\t_updateLayerName($canvas, data, layer, {\n\t\t\t\tname: null\n\t\t\t});\n\t\t\t// Update layer group map\n\t\t\t_updateLayerGroups($canvas, data, layer, {\n\t\t\t\tgroups: null\n\t\t\t});\n\n\t\t\t// Trigger 'remove' event\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'remove');\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Remove all layers\n$.fn.removeLayers = function removeLayers(callback) {\n\tvar $canvases = this, $canvas, e,\n\t\tdata, layers, layer, l;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tdata = _getCanvasData($canvases[e]);\n\t\tlayers = $canvas.getLayers(callback).slice(0);\n\t\t// Remove all layers individually\n\t\tfor (l = 0; l < layers.length; l += 1) {\n\t\t\tlayer = layers[l];\n\t\t\t$canvas.removeLayer(layer);\n\t\t}\n\t\t// Update layer maps\n\t\tdata.layer.names = {};\n\t\tdata.layer.groups = {};\n\t}\n\treturn $canvases;\n};\n\n// Remove all layers in the group with the given ID\n$.fn.removeLayerGroup = function removeLayerGroup(groupId) {\n\tvar $canvases = this, $canvas, e, group, l;\n\n\tif (groupId !== undefined) {\n\t\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t\t$canvas = $($canvases[e]);\n\n\t\t\tgroup = $canvas.getLayerGroup(groupId);\n\t\t\t// Remove layer group using given group name\n\t\t\tif (group) {\n\n\t\t\t\t// Clone groups array\n\t\t\t\tgroup = group.slice(0);\n\n\t\t\t\t// Loop through layers in group\n\t\t\t\tfor (l = 0; l < group.length; l += 1) {\n\t\t\t\t\t$canvas.removeLayer(group[l]);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Add an existing layer to a layer group\n$.fn.addLayerToGroup = function addLayerToGroup(layerId, groupName) {\n\tvar $canvases = this, $canvas, e,\n\t\tlayer, groups = [groupName];\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tlayer = $canvas.getLayer(layerId);\n\n\t\t// If layer is not already in group\n\t\tif (layer.groups) {\n\t\t\t// Clone groups list\n\t\t\tgroups = layer.groups.slice(0);\n\t\t\t// If layer is not already in group\n\t\t\tif (inArray(groupName, layer.groups) === -1) {\n\t\t\t\t// Add layer to group\n\t\t\t\tgroups.push(groupName);\n\t\t\t}\n\t\t}\n\t\t// Update layer group maps\n\t\t$canvas.setLayer(layer, {\n\t\t\tgroups: groups\n\t\t});\n\n\t}\n\treturn $canvases;\n};\n\n// Remove an existing layer from a layer group\n$.fn.removeLayerFromGroup = function removeLayerFromGroup(layerId, groupName) {\n\tvar $canvases = this, $canvas, e,\n\t\tlayer, groups = [],\n\t\tindex;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tlayer = $canvas.getLayer(layerId);\n\n\t\tif (layer.groups) {\n\n\t\t\t// Find index of layer in group\n\t\t\tindex = inArray(groupName, layer.groups);\n\n\t\t\t// If layer is in group\n\t\t\tif (index !== -1) {\n\n\t\t\t\t// Clone groups list\n\t\t\t\tgroups = layer.groups.slice(0);\n\n\t\t\t\t// Remove layer from group\n\t\t\t\tgroups.splice(index, 1);\n\n\t\t\t\t// Update layer group maps\n\t\t\t\t$canvas.setLayer(layer, {\n\t\t\t\t\tgroups: groups\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\treturn $canvases;\n};\n\n// Get topmost layer that intersects with event coordinates\nfunction _getIntersectingLayer(data) {\n\tvar layer, i,\n\t\tmask, m;\n\n\t// Store the topmost layer\n\tlayer = null;\n\n\t// Get the topmost layer whose visible area intersects event coordinates\n\tfor (i = data.intersecting.length - 1; i >= 0; i -= 1) {\n\n\t\t// Get current layer\n\t\tlayer = data.intersecting[i];\n\n\t\t// If layer has previous masks\n\t\tif (layer._masks) {\n\n\t\t\t// Search previous masks to ensure\n\t\t\t// layer is visible at event coordinates\n\t\t\tfor (m = layer._masks.length - 1; m >= 0; m -= 1) {\n\t\t\t\tmask = layer._masks[m];\n\t\t\t\t// If mask does not intersect event coordinates\n\t\t\t\tif (!mask.intersects) {\n\t\t\t\t\t// Indicate that the mask does not\n\t\t\t\t\t// intersect event coordinates\n\t\t\t\t\tlayer.intersects = false;\n\t\t\t\t\t// Stop searching previous masks\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If event coordinates intersect all previous masks\n\t\t\t// and layer is not intangible\n\t\t\tif (layer.intersects && !layer.intangible) {\n\t\t\t\t// Stop searching for topmost layer\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t}\n\t// If resulting layer is intangible\n\tif (layer && layer.intangible) {\n\t\t// Cursor does not intersect this layer\n\t\tlayer = null;\n\t}\n\treturn layer;\n}\n\n// Draw individual layer (internal)\nfunction _drawLayer($canvas, ctx, layer, nextLayerIndex) {\n\tif (layer && layer.visible && layer._method) {\n\t\tif (nextLayerIndex) {\n\t\t\tlayer._next = nextLayerIndex;\n\t\t} else {\n\t\t\tlayer._next = null;\n\t\t}\n\t\t// If layer is an object, call its respective method\n\t\tif (layer._method) {\n\t\t\tlayer._method.call($canvas, layer);\n\t\t}\n\t}\n}\n\n// Handle dragging of the currently-dragged layer\nfunction _handleLayerDrag($canvas, data, eventType) {\n\tvar layers, layer, l,\n\t\tdrag, dragGroups,\n\t\tgroup, groupName, g,\n\t\tnewX, newY;\n\n\tdrag = data.drag;\n\tlayer = drag.layer;\n\tdragGroups = (layer && layer.dragGroups) || [];\n\tlayers = data.layers;\n\n\tif (eventType === 'mousemove' || eventType === 'touchmove') {\n\t\t// Detect when user is currently dragging layer\n\n\t\tif (!drag.dragging) {\n\t\t\t// Detect when user starts dragging layer\n\n\t\t\t// Signify that a layer on the canvas is being dragged\n\t\t\tdrag.dragging = true;\n\t\t\tlayer.dragging = true;\n\n\t\t\t// Optionally bring layer to front when drag starts\n\t\t\tif (layer.bringToFront) {\n\t\t\t\t// Remove layer from its original position\n\t\t\t\tlayers.splice(layer.index, 1);\n\t\t\t\t// Bring layer to front\n\t\t\t\t// push() returns the new array length\n\t\t\t\tlayer.index = layers.push(layer);\n\t\t\t}\n\n\t\t\t// Set drag properties for this layer\n\t\t\tlayer._startX = layer.x;\n\t\t\tlayer._startY = layer.y;\n\t\t\tlayer._endX = layer._eventX;\n\t\t\tlayer._endY = layer._eventY;\n\n\t\t\t// Trigger dragstart event\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'dragstart');\n\n\t\t}\n\n\t\tif (drag.dragging) {\n\n\t\t\t// Calculate position after drag\n\t\t\tnewX = layer._eventX - (layer._endX - layer._startX);\n\t\t\tnewY = layer._eventY - (layer._endY - layer._startY);\n\t\t\tif (layer.updateDragX) {\n\t\t\t\tnewX = layer.updateDragX.call($canvas[0], layer, newX);\n\t\t\t}\n\t\t\tif (layer.updateDragY) {\n\t\t\t\tnewY = layer.updateDragY.call($canvas[0], layer, newY);\n\t\t\t}\n\t\t\tlayer.dx = newX - layer.x;\n\t\t\tlayer.dy = newY - layer.y;\n\t\t\tif (layer.restrictDragToAxis !== 'y') {\n\t\t\t\tlayer.x = newX;\n\t\t\t}\n\t\t\tif (layer.restrictDragToAxis !== 'x') {\n\t\t\t\tlayer.y = newY;\n\t\t\t}\n\n\t\t\t// Trigger drag event\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'drag');\n\n\t\t\t// Move groups with layer on drag\n\t\t\tfor (g = 0; g < dragGroups.length; g += 1) {\n\n\t\t\t\tgroupName = dragGroups[g];\n\t\t\t\tgroup = data.layer.groups[groupName];\n\t\t\t\tif (layer.groups && group) {\n\n\t\t\t\t\tfor (l = 0; l < group.length; l += 1) {\n\t\t\t\t\t\tif (group[l] !== layer) {\n\t\t\t\t\t\t\tif (layer.restrictDragToAxis !== 'y' && group[l].restrictDragToAxis !== 'y') {\n\t\t\t\t\t\t\t\tgroup[l].x += layer.dx;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (layer.restrictDragToAxis !== 'x' && group[l].restrictDragToAxis !== 'x') {\n\t\t\t\t\t\t\t\tgroup[l].y += layer.dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else if (eventType === 'mouseup' || eventType === 'touchend') {\n\t\t// Detect when user stops dragging layer\n\n\t\tif (drag.dragging) {\n\t\t\tlayer.dragging = false;\n\t\t\tdrag.dragging = false;\n\t\t\tdata.redrawOnMousemove = data.originalRedrawOnMousemove;\n\t\t\t// Trigger dragstop event\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'dragstop');\n\t\t}\n\n\t\t// Cancel dragging\n\t\tdata.drag = {};\n\n\t}\n}\n\n\n// List of CSS3 cursors that need to be prefixed\ncss.cursors = ['grab', 'grabbing', 'zoom-in', 'zoom-out'];\n\n// Function to detect vendor prefix\n// Modified version of David Walsh's implementation\n// https://davidwalsh.name/vendor-prefix\ncss.prefix = (function () {\n\tvar styles = getComputedStyle(document.documentElement, ''),\n\t\tpre = (arraySlice\n\t\t\t.call(styles)\n\t\t\t.join('')\n\t\t\t.match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])\n\t\t)[1];\n\treturn '-' + pre + '-';\n})();\n\n// Set cursor on canvas\nfunction _setCursor($canvas, layer, eventType) {\n\tvar cursor;\n\tif (layer.cursors) {\n\t\t// Retrieve cursor from cursors object if it exists\n\t\tcursor = layer.cursors[eventType];\n\t}\n\t// Prefix any CSS3 cursor\n\tif ($.inArray(cursor, css.cursors) !== -1) {\n\t\tcursor = css.prefix + cursor;\n\t}\n\t// If cursor is defined\n\tif (cursor) {\n\t\t// Set canvas cursor\n\t\t$canvas.css({\n\t\t\tcursor: cursor\n\t\t});\n\t}\n}\n\n// Reset cursor on canvas\nfunction _resetCursor($canvas, data) {\n\t$canvas.css({\n\t\tcursor: data.cursor\n\t});\n}\n\n// Run the given event callback with the given arguments\nfunction _runEventCallback($canvas, layer, eventType, callbacks, arg) {\n\t// Prevent callback from firing recursively\n\tif (callbacks[eventType] && layer._running && !layer._running[eventType]) {\n\t\t// Signify the start of callback execution for this event\n\t\tlayer._running[eventType] = true;\n\t\t// Run event callback with the given arguments\n\t\tcallbacks[eventType].call($canvas[0], layer, arg);\n\t\t// Signify the end of callback execution for this event\n\t\tlayer._running[eventType] = false;\n\t}\n}\n\n// Determine if the given layer can \"legally\" fire the given event\nfunction _layerCanFireEvent(layer, eventType) {\n\t// If events are disable and if\n\t// layer is tangible or event is not tangible\n\treturn (!layer.disableEvents &&\n\t\t(!layer.intangible || $.inArray(eventType, tangibleEvents) === -1));\n}\n\n// Trigger the given event on the given layer\nfunction _triggerLayerEvent($canvas, data, layer, eventType, arg) {\n\t// If layer can legally fire this event type\n\tif (_layerCanFireEvent(layer, eventType)) {\n\n\t\t// Do not set a custom cursor on layer mouseout\n\t\tif (eventType !== 'mouseout') {\n\t\t\t// Update cursor if one is defined for this event\n\t\t\t_setCursor($canvas, layer, eventType);\n\t\t}\n\n\t\t// Trigger the user-defined event callback\n\t\t_runEventCallback($canvas, layer, eventType, layer, arg);\n\t\t// Trigger the canvas-bound event hook\n\t\t_runEventCallback($canvas, layer, eventType, data.eventHooks, arg);\n\t\t// Trigger the global event hook\n\t\t_runEventCallback($canvas, layer, eventType, jCanvas.eventHooks, arg);\n\n\t}\n}\n\n// Manually trigger a layer event\n$.fn.triggerLayerEvent = function (layer, eventType) {\n\tvar $canvases = this, $canvas, e,\n\t\tdata;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tdata = _getCanvasData($canvases[e]);\n\t\tlayer = $canvas.getLayer(layer);\n\t\tif (layer) {\n\t\t\t_triggerLayerEvent($canvas, data, layer, eventType);\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Draw layer with the given ID\n$.fn.drawLayer = function drawLayer(layerId) {\n\tvar $canvases = this, e, ctx,\n\t\t$canvas, layer;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\t\t\tlayer = $canvas.getLayer(layerId);\n\t\t\t_drawLayer($canvas, ctx, layer);\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Draw all layers (or, if given, only layers starting at an index)\n$.fn.drawLayers = function drawLayers(args) {\n\tvar $canvases = this, $canvas, e, ctx,\n\t\t// Internal parameters for redrawing the canvas\n\t\tparams = args || {},\n\t\t// Other variables\n\t\tlayers, layer, lastLayer, l, index, lastIndex,\n\t\tdata, eventCache, eventType, isImageLayer;\n\n\t// The layer index from which to start redrawing the canvas\n\tindex = params.index;\n\tif (!index) {\n\t\tindex = 0;\n\t}\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t\t// Clear canvas first unless otherwise directed\n\t\t\tif (params.clear !== false) {\n\t\t\t\t$canvas.clearCanvas();\n\t\t\t}\n\n\t\t\t// If a completion callback was provided, save it to the canvas data\n\t\t\t// store so that the function can be passed to drawLayers() again\n\t\t\t// after any image layers have loaded\n\t\t\tif (params.complete) {\n\t\t\t\tdata.drawLayersComplete = params.complete;\n\t\t\t}\n\n\t\t\t// Cache the layers array\n\t\t\tlayers = data.layers;\n\n\t\t\t// Draw layers from first to last (bottom to top)\n\t\t\tfor (l = index; l < layers.length; l += 1) {\n\t\t\t\tlayer = layers[l];\n\n\t\t\t\t// Ensure layer index is up-to-date\n\t\t\t\tlayer.index = l;\n\n\t\t\t\t// Prevent any one event from firing excessively\n\t\t\t\tif (params.resetFire) {\n\t\t\t\t\tlayer._fired = false;\n\t\t\t\t}\n\t\t\t\t// Draw layer\n\t\t\t\t_drawLayer($canvas, ctx, layer, l + 1);\n\t\t\t\t// Store list of previous masks for each layer\n\t\t\t\tlayer._masks = data.transforms.masks.slice(0);\n\n\t\t\t\t// Allow image layers to load before drawing successive layers\n\t\t\t\tif (layer._method === $.fn.drawImage && layer.visible) {\n\t\t\t\t\tisImageLayer = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If layer is an image layer\n\t\t\tif (isImageLayer) {\n\t\t\t\t// Stop and wait for drawImage() to resume drawLayers()\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Store the latest\n\t\t\tlastIndex = l;\n\n\t\t\t// Run completion callback (if provided) once all layers have drawn\n\t\t\tif (params.complete) {\n\t\t\t\tparams.complete.call($canvases[e]);\n\t\t\t\tdelete data.drawLayersComplete;\n\t\t\t}\n\n\t\t\t// Get first layer that intersects with event coordinates\n\t\t\tlayer = _getIntersectingLayer(data);\n\n\t\t\teventCache = data.event;\n\t\t\teventType = eventCache.type;\n\n\t\t\t// If jCanvas has detected a dragstart\n\t\t\tif (data.drag.layer) {\n\t\t\t\t// Handle dragging of layer\n\t\t\t\t_handleLayerDrag($canvas, data, eventType);\n\t\t\t}\n\n\t\t\t// Manage mouseout event\n\t\t\tlastLayer = data.lastIntersected;\n\t\t\tif (lastLayer !== null && layer !== lastLayer && lastLayer._hovered && !lastLayer._fired && !data.drag.dragging) {\n\n\t\t\t\tdata.lastIntersected = null;\n\t\t\t\tlastLayer._fired = true;\n\t\t\t\tlastLayer._hovered = false;\n\t\t\t\t_triggerLayerEvent($canvas, data, lastLayer, 'mouseout');\n\t\t\t\t_resetCursor($canvas, data);\n\n\t\t\t}\n\n\t\t\tif (layer) {\n\n\t\t\t\t// Use mouse event callbacks if no touch event callbacks are given\n\t\t\t\tif (!layer[eventType]) {\n\t\t\t\t\teventType = _getMouseEventName(eventType);\n\t\t\t\t}\n\n\t\t\t\t// Check events for intersecting layer\n\t\t\t\tif (layer._event && layer.intersects) {\n\n\t\t\t\t\tdata.lastIntersected = layer;\n\n\t\t\t\t\t// Detect mouseover events\n\t\t\t\t\tif ((layer.mouseover || layer.mouseout || layer.cursors) && !data.drag.dragging) {\n\n\t\t\t\t\t\tif (!layer._hovered && !layer._fired) {\n\n\t\t\t\t\t\t\t// Prevent events from firing excessively\n\t\t\t\t\t\t\tlayer._fired = true;\n\t\t\t\t\t\t\tlayer._hovered = true;\n\t\t\t\t\t\t\t_triggerLayerEvent($canvas, data, layer, 'mouseover');\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Detect any other mouse event\n\t\t\t\t\tif (!layer._fired) {\n\n\t\t\t\t\t\t// Prevent event from firing twice unintentionally\n\t\t\t\t\t\tlayer._fired = true;\n\t\t\t\t\t\teventCache.type = null;\n\n\t\t\t\t\t\t_triggerLayerEvent($canvas, data, layer, eventType);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Use the mousedown event to start drag\n\t\t\t\t\tif (layer.draggable && !layer.disableEvents && (eventType === 'mousedown' || eventType === 'touchstart')) {\n\n\t\t\t\t\t\t// Keep track of drag state\n\t\t\t\t\t\tdata.drag.layer = layer;\n\t\t\t\t\t\tdata.originalRedrawOnMousemove = data.redrawOnMousemove;\n\t\t\t\t\t\tdata.redrawOnMousemove = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If cursor is not intersecting with any layer\n\t\t\tif (layer === null && !data.drag.dragging) {\n\t\t\t\t// Reset cursor to previous state\n\t\t\t\t_resetCursor($canvas, data);\n\t\t\t}\n\n\t\t\t// If the last layer has been drawn\n\t\t\tif (lastIndex === layers.length) {\n\n\t\t\t\t// Reset list of intersecting layers\n\t\t\t\tdata.intersecting.length = 0;\n\t\t\t\t// Reset transformation stack\n\t\t\t\tdata.transforms = _cloneTransforms(baseTransforms);\n\t\t\t\tdata.savedTransforms.length = 0;\n\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Add a jCanvas layer (internal)\nfunction _addLayer(canvas, params, args, method) {\n\tvar $canvas, data,\n\t\tlayers, layer = (params._layer ? args : params);\n\n\t// Store arguments object for later use\n\tparams._args = args;\n\n\t// Convert all draggable drawings into jCanvas layers\n\tif (params.draggable || params.dragGroups) {\n\t\tparams.layer = true;\n\t\tparams.draggable = true;\n\t}\n\n\t// Determine the layer's type using the available information\n\tif (!params._method) {\n\t\tif (method) {\n\t\t\tparams._method = method;\n\t\t} else if (params.method) {\n\t\t\tparams._method = $.fn[params.method];\n\t\t} else if (params.type) {\n\t\t\tparams._method = $.fn[maps.drawings[params.type]];\n\t\t}\n\t}\n\n\t// If layer hasn't been added yet\n\tif (params.layer && !params._layer) {\n\t\t// Add layer to canvas\n\n\t\t$canvas = $(canvas);\n\n\t\tdata = _getCanvasData(canvas);\n\t\tlayers = data.layers;\n\n\t\t// Do not add duplicate layers of same name\n\t\tif (layer.name === null || (isString(layer.name) && data.layer.names[layer.name] === undefined)) {\n\n\t\t\t// Convert number properties to numbers\n\t\t\t_coerceNumericProps(params);\n\n\t\t\t// Ensure layers are unique across canvases by cloning them\n\t\t\tlayer = new jCanvasObject(params);\n\t\t\tlayer.canvas = canvas;\n\t\t\t// Indicate that this is a layer for future checks\n\t\t\tlayer.layer = true;\n\t\t\tlayer._layer = true;\n\t\t\tlayer._running = {};\n\t\t\t// If layer stores user-defined data\n\t\t\tif (layer.data !== null) {\n\t\t\t\t// Clone object\n\t\t\t\tlayer.data = extendObject({}, layer.data);\n\t\t\t} else {\n\t\t\t\t// Otherwise, create data object\n\t\t\t\tlayer.data = {};\n\t\t\t}\n\t\t\t// If layer stores a list of associated groups\n\t\t\tif (layer.groups !== null) {\n\t\t\t\t// Clone list\n\t\t\t\tlayer.groups = layer.groups.slice(0);\n\t\t\t} else {\n\t\t\t\t// Otherwise, create empty list\n\t\t\t\tlayer.groups = [];\n\t\t\t}\n\n\t\t\t// Update layer group maps\n\t\t\t_updateLayerName($canvas, data, layer);\n\t\t\t_updateLayerGroups($canvas, data, layer);\n\n\t\t\t// Check for any associated jCanvas events and enable them\n\t\t\t_addLayerEvents($canvas, data, layer);\n\n\t\t\t// Optionally enable drag-and-drop support and cursor support\n\t\t\t_enableDrag($canvas, data, layer);\n\n\t\t\t// Copy _event property to parameters object\n\t\t\tparams._event = layer._event;\n\n\t\t\t// Calculate width/height for text layers\n\t\t\tif (layer._method === $.fn.drawText) {\n\t\t\t\t$canvas.measureText(layer);\n\t\t\t}\n\n\t\t\t// Add layer to end of array if no index is specified\n\t\t\tif (layer.index === null) {\n\t\t\t\tlayer.index = layers.length;\n\t\t\t}\n\n\t\t\t// Add layer to layers array at specified index\n\t\t\tlayers.splice(layer.index, 0, layer);\n\n\t\t\t// Store layer on parameters object\n\t\t\tparams._args = layer;\n\n\t\t\t// Trigger an 'add' event\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'add');\n\n\t\t}\n\n\t} else if (!params.layer) {\n\t\t_coerceNumericProps(params);\n\t}\n\n\treturn layer;\n}\n\n// Add a jCanvas layer\n$.fn.addLayer = function addLayer(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\tparams.layer = true;\n\t\t\t_addLayer($canvases[e], params, args);\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n/* Animation API */\n\n// Define properties used in both CSS and jCanvas\ncss.props = [\n\t'width',\n\t'height',\n\t'opacity',\n\t'lineHeight'\n];\ncss.propsObj = {};\n\n// Hide/show jCanvas/CSS properties so they can be animated using jQuery\nfunction _showProps(obj) {\n\tvar cssProp, p;\n\tfor (p = 0; p < css.props.length; p += 1) {\n\t\tcssProp = css.props[p];\n\t\tobj[cssProp] = obj['_' + cssProp];\n\t}\n}\nfunction _hideProps(obj, reset) {\n\tvar cssProp, p;\n\tfor (p = 0; p < css.props.length; p += 1) {\n\t\tcssProp = css.props[p];\n\t\t// Hide property using same name with leading underscore\n\t\tif (obj[cssProp] !== undefined) {\n\t\t\tobj['_' + cssProp] = obj[cssProp];\n\t\t\tcss.propsObj[cssProp] = true;\n\t\t\tif (reset) {\n\t\t\t\tdelete obj[cssProp];\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Evaluate property values that are functions\nfunction _parseEndValues(canvas, layer, endValues) {\n\tvar propName, propValue,\n\t\tsubPropName, subPropValue;\n\t// Loop through all properties in map of end values\n\tfor (propName in endValues) {\n\t\tif (Object.prototype.hasOwnProperty.call(endValues, propName)) {\n\t\t\tpropValue = endValues[propName];\n\t\t\t// If end value is function\n\t\t\tif (isFunction(propValue)) {\n\t\t\t\t// Call function and use its value as the end value\n\t\t\t\tendValues[propName] = propValue.call(canvas, layer, propName);\n\t\t\t}\n\t\t\t// If end value is an object\n\t\t\tif (typeOf(propValue) === 'object' && isPlainObject(propValue)) {\n\t\t\t\t// Prepare to animate properties in object\n\t\t\t\tfor (subPropName in propValue) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(propValue, subPropName)) {\n\t\t\t\t\t\tsubPropValue = propValue[subPropName];\n\t\t\t\t\t\t// Store property's start value at top-level of layer\n\t\t\t\t\t\tif (layer[propName] !== undefined) {\n\t\t\t\t\t\t\tlayer[propName + '.' + subPropName] = layer[propName][subPropName];\n\t\t\t\t\t\t\t// Store property's end value at top-level of end values map\n\t\t\t\t\t\t\tendValues[propName + '.' + subPropName] = subPropValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Delete sub-property of object as it's no longer needed\n\t\t\t\tdelete endValues[propName];\n\t\t\t}\n\t\t}\n\t}\n\treturn endValues;\n}\n\n// Remove sub-property aliases from layer object\nfunction _removeSubPropAliases(layer) {\n\tvar propName;\n\tfor (propName in layer) {\n\t\tif (Object.prototype.hasOwnProperty.call(layer, propName)) {\n\t\t\tif (propName.indexOf('.') !== -1) {\n\t\t\t\tdelete layer[propName];\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Convert a color value to an array of RGB values\nfunction _colorToRgbArray(color) {\n\tvar originalColor, elem,\n\t\trgb = [],\n\t\tmultiple = 1;\n\n\t// Deal with complete transparency\n\tif (color === 'transparent') {\n\t\tcolor = 'rgba(0, 0, 0, 0)';\n\t} else if (color.match(/^([a-z]+|#[0-9a-f]+)$/gi)) {\n\t\t// Deal with hexadecimal colors and color names\n\t\telem = document.head;\n\t\toriginalColor = elem.style.color;\n\t\telem.style.color = color;\n\t\tcolor = $.css(elem, 'color');\n\t\telem.style.color = originalColor;\n\t}\n\t// Parse RGB string\n\tif (color.match(/^rgb/gi)) {\n\t\trgb = color.match(/(\\d+(\\.\\d+)?)/gi);\n\t\t// Deal with RGB percentages\n\t\tif (color.match(/%/gi)) {\n\t\t\tmultiple = 2.55;\n\t\t}\n\t\trgb[0] *= multiple;\n\t\trgb[1] *= multiple;\n\t\trgb[2] *= multiple;\n\t\t// Ad alpha channel if given\n\t\tif (rgb[3] !== undefined) {\n\t\t\trgb[3] = parseFloat(rgb[3]);\n\t\t} else {\n\t\t\trgb[3] = 1;\n\t\t}\n\t}\n\treturn rgb;\n}\n\n// Animate a hex or RGB color\nfunction _animateColor(fx) {\n\tvar n = 3,\n\t\ti;\n\t// Only parse start and end colors once\n\tif (typeOf(fx.start) !== 'array') {\n\t\tfx.start = _colorToRgbArray(fx.start);\n\t\tfx.end = _colorToRgbArray(fx.end);\n\t}\n\tfx.now = [];\n\n\t// If colors are RGBA, animate transparency\n\tif (fx.start[3] !== 1 || fx.end[3] !== 1) {\n\t\tn = 4;\n\t}\n\n\t// Calculate current frame for red, green, blue, and alpha\n\tfor (i = 0; i < n; i += 1) {\n\t\tfx.now[i] = fx.start[i] + ((fx.end[i] - fx.start[i]) * fx.pos);\n\t\t// Only the red, green, and blue values must be integers\n\t\tif (i < 3) {\n\t\t\tfx.now[i] = round(fx.now[i]);\n\t\t}\n\t}\n\tif (fx.start[3] !== 1 || fx.end[3] !== 1) {\n\t\t// Only use RGBA if RGBA colors are given\n\t\tfx.now = 'rgba(' + fx.now.join(',') + ')';\n\t} else {\n\t\t// Otherwise, animate as solid colors\n\t\tfx.now.slice(0, 3);\n\t\tfx.now = 'rgb(' + fx.now.join(',') + ')';\n\t}\n\t// Animate colors for both canvas layers and DOM elements\n\tif (fx.elem.nodeName) {\n\t\tfx.elem.style[fx.prop] = fx.now;\n\t} else {\n\t\tfx.elem[fx.prop] = fx.now;\n\t}\n}\n\n// Animate jCanvas layer\n$.fn.animateLayer = function animateLayer() {\n\tvar $canvases = this, $canvas, e, ctx,\n\t\targs = arraySlice.call(arguments, 0),\n\t\tdata, layer, props;\n\n\t// Deal with all cases of argument placement\n\t/*\n\t\t0. layer name/index\n\t\t1. properties\n\t\t2. duration/options\n\t\t3. easing\n\t\t4. complete function\n\t\t5. step function\n\t*/\n\n\tif (typeOf(args[2]) === 'object') {\n\n\t\t// Accept an options object for animation\n\t\targs.splice(2, 0, args[2].duration || null);\n\t\targs.splice(3, 0, args[3].easing || null);\n\t\targs.splice(4, 0, args[4].complete || null);\n\t\targs.splice(5, 0, args[5].step || null);\n\n\t} else {\n\n\t\tif (args[2] === undefined) {\n\t\t\t// If object is the last argument\n\t\t\targs.splice(2, 0, null);\n\t\t\targs.splice(3, 0, null);\n\t\t\targs.splice(4, 0, null);\n\t\t} else if (isFunction(args[2])) {\n\t\t\t// If callback comes after object\n\t\t\targs.splice(2, 0, null);\n\t\t\targs.splice(3, 0, null);\n\t\t}\n\t\tif (args[3] === undefined) {\n\t\t\t// If duration is the last argument\n\t\t\targs[3] = null;\n\t\t\targs.splice(4, 0, null);\n\t\t} else if (isFunction(args[3])) {\n\t\t\t// If callback comes after duration\n\t\t\targs.splice(3, 0, null);\n\t\t}\n\n\t}\n\n\t// Run callback function when animation completes\n\tfunction complete($canvas, data, layer) {\n\n\t\treturn function () {\n\n\t\t\t_showProps(layer);\n\t\t\t_removeSubPropAliases(layer);\n\n\t\t\t// Prevent multiple redraw loops\n\t\t\tif (!data.animating || data.animated === layer) {\n\t\t\t\t// Redraw layers on last frame\n\t\t\t\t$canvas.drawLayers();\n\t\t\t}\n\n\t\t\t// Signify the end of an animation loop\n\t\t\tlayer._animating = false;\n\t\t\tdata.animating = false;\n\t\t\tdata.animated = null;\n\n\t\t\t// If callback is defined\n\t\t\tif (args[4]) {\n\t\t\t\t// Run callback at the end of the animation\n\t\t\t\targs[4].call($canvas[0], layer);\n\t\t\t}\n\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'animateend');\n\n\t\t};\n\n\t}\n\n\t// Redraw layers on every frame of the animation\n\tfunction step($canvas, data, layer) {\n\n\t\treturn function (now, fx) {\n\t\t\tvar parts, propName, subPropName,\n\t\t\t\thidden = false;\n\n\t\t\t// If animated property has been hidden\n\t\t\tif (fx.prop[0] === '_') {\n\t\t\t\thidden = true;\n\t\t\t\t// Unhide property temporarily\n\t\t\t\tfx.prop = fx.prop.replace('_', '');\n\t\t\t\tlayer[fx.prop] = layer['_' + fx.prop];\n\t\t\t}\n\n\t\t\t// If animating property of sub-object\n\t\t\tif (fx.prop.indexOf('.') !== -1) {\n\t\t\t\tparts = fx.prop.split('.');\n\t\t\t\tpropName = parts[0];\n\t\t\t\tsubPropName = parts[1];\n\t\t\t\tif (layer[propName]) {\n\t\t\t\t\tlayer[propName][subPropName] = fx.now;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Throttle animation to improve efficiency\n\t\t\tif (layer._pos !== fx.pos) {\n\n\t\t\t\tlayer._pos = fx.pos;\n\n\t\t\t\t// Signify the start of an animation loop\n\t\t\t\tif (!layer._animating && !data.animating) {\n\t\t\t\t\tlayer._animating = true;\n\t\t\t\t\tdata.animating = true;\n\t\t\t\t\tdata.animated = layer;\n\t\t\t\t}\n\n\t\t\t\t// Prevent multiple redraw loops\n\t\t\t\tif (!data.animating || data.animated === layer) {\n\t\t\t\t\t// Redraw layers for every frame\n\t\t\t\t\t$canvas.drawLayers();\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If callback is defined\n\t\t\tif (args[5]) {\n\t\t\t\t// Run callback for each step of animation\n\t\t\t\targs[5].call($canvas[0], now, fx, layer);\n\t\t\t}\n\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'animate', fx);\n\n\t\t\t// If property should be hidden during animation\n\t\t\tif (hidden) {\n\t\t\t\t// Hide property again\n\t\t\t\tfx.prop = '_' + fx.prop;\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t\t// If a layer object was passed, use it the layer to be animated\n\t\t\tlayer = $canvas.getLayer(args[0]);\n\n\t\t\t// Ignore layers that are functions\n\t\t\tif (layer && layer._method !== $.fn.draw) {\n\n\t\t\t\t// Do not modify original object\n\t\t\t\tprops = extendObject({}, args[1]);\n\n\t\t\t\tprops = _parseEndValues($canvases[e], layer, props);\n\n\t\t\t\t// Bypass jQuery CSS Hooks for CSS properties (width, opacity, etc.)\n\t\t\t\t_hideProps(props, true);\n\t\t\t\t_hideProps(layer);\n\n\t\t\t\t// Fix for jQuery's vendor prefixing support, which affects how width/height/opacity are animated\n\t\t\t\tlayer.style = css.propsObj;\n\n\t\t\t\t// Animate layer\n\t\t\t\t$(layer).animate(props, {\n\t\t\t\t\tduration: args[2],\n\t\t\t\t\teasing: ($.easing[args[3]] ? args[3] : null),\n\t\t\t\t\t// When animation completes\n\t\t\t\t\tcomplete: complete($canvas, data, layer),\n\t\t\t\t\t// Redraw canvas for every animation frame\n\t\t\t\t\tstep: step($canvas, data, layer)\n\t\t\t\t});\n\t\t\t\t_triggerLayerEvent($canvas, data, layer, 'animatestart');\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Animate all layers in a layer group\n$.fn.animateLayerGroup = function animateLayerGroup(groupId) {\n\tvar $canvases = this, $canvas, e,\n\t\targs = arraySlice.call(arguments, 0),\n\t\tgroup, l;\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tgroup = $canvas.getLayerGroup(groupId);\n\t\tif (group) {\n\n\t\t\t// Animate all layers in the group\n\t\t\tfor (l = 0; l < group.length; l += 1) {\n\n\t\t\t\t// Replace first argument with layer\n\t\t\t\targs[0] = group[l];\n\t\t\t\t$canvas.animateLayer.apply($canvas, args);\n\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Delay layer animation by a given number of milliseconds\n$.fn.delayLayer = function delayLayer(layerId, duration) {\n\tvar $canvases = this, $canvas, e,\n\t\tdata, layer;\n\tduration = duration || 0;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tdata = _getCanvasData($canvases[e]);\n\t\tlayer = $canvas.getLayer(layerId);\n\t\t// If layer exists\n\t\tif (layer) {\n\t\t\t// Delay animation\n\t\t\t$(layer).delay(duration);\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'delay');\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Delay animation all layers in a layer group\n$.fn.delayLayerGroup = function delayLayerGroup(groupId, duration) {\n\tvar $canvases = this, $canvas, e,\n\t\tgroup, layer, l;\n\tduration = duration || 0;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\n\t\tgroup = $canvas.getLayerGroup(groupId);\n\t\t// Delay all layers in the group\n\t\tif (group) {\n\n\t\t\tfor (l = 0; l < group.length; l += 1) {\n\t\t\t\t// Delay each layer in the group\n\t\t\t\tlayer = group[l];\n\t\t\t\t$canvas.delayLayer(layer, duration);\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Stop layer animation\n$.fn.stopLayer = function stopLayer(layerId, clearQueue) {\n\tvar $canvases = this, $canvas, e,\n\t\tdata, layer;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\t\tdata = _getCanvasData($canvases[e]);\n\t\tlayer = $canvas.getLayer(layerId);\n\t\t// If layer exists\n\t\tif (layer) {\n\t\t\t// Stop animation\n\t\t\t$(layer).stop(clearQueue);\n\t\t\t_triggerLayerEvent($canvas, data, layer, 'stop');\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Stop animation of all layers in a layer group\n$.fn.stopLayerGroup = function stopLayerGroup(groupId, clearQueue) {\n\tvar $canvases = this, $canvas, e,\n\t\tgroup, layer, l;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t$canvas = $($canvases[e]);\n\n\t\tgroup = $canvas.getLayerGroup(groupId);\n\t\t// Stop all layers in the group\n\t\tif (group) {\n\n\t\t\tfor (l = 0; l < group.length; l += 1) {\n\t\t\t\t// Stop each layer in the group\n\t\t\t\tlayer = group[l];\n\t\t\t\t$canvas.stopLayer(layer, clearQueue);\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Enable animation for color properties\nfunction _supportColorProps(props) {\n\tvar p;\n\tfor (p = 0; p < props.length; p += 1) {\n\t\t$.fx.step[props[p]] = _animateColor;\n\t}\n}\n\n// Enable animation for color properties\n_supportColorProps([\n\t'color',\n\t'backgroundColor',\n\t'borderColor',\n\t'borderTopColor',\n\t'borderRightColor',\n\t'borderBottomColor',\n\t'borderLeftColor',\n\t'fillStyle',\n\t'outlineColor',\n\t'strokeStyle',\n\t'shadowColor'\n]);\n\n/* Event API */\n\n// Map standard mouse events to touch events\nmaps.touchEvents = {\n\t'mousedown': 'touchstart',\n\t'mouseup': 'touchend',\n\t'mousemove': 'touchmove'\n};\n// Map standard touch events to mouse events\nmaps.mouseEvents = {\n\t'touchstart': 'mousedown',\n\t'touchend': 'mouseup',\n\t'touchmove': 'mousemove'\n};\n\n// Convert mouse event name to a corresponding touch event name (if possible)\nfunction _getTouchEventName(eventName) {\n\t// Detect touch event support\n\tif (maps.touchEvents[eventName]) {\n\t\teventName = maps.touchEvents[eventName];\n\t}\n\treturn eventName;\n}\n// Convert touch event name to a corresponding mouse event name\nfunction _getMouseEventName(eventName) {\n\tif (maps.mouseEvents[eventName]) {\n\t\teventName = maps.mouseEvents[eventName];\n\t}\n\treturn eventName;\n}\n\n// Bind event to jCanvas layer using standard jQuery events\nfunction _createEvent(eventName) {\n\n\tjCanvas.events[eventName] = function ($canvas, data) {\n\t\tvar helperEventName, touchEventName, eventCache;\n\n\t\t// Retrieve canvas's event cache\n\t\teventCache = data.event;\n\n\t\t// Both mouseover/mouseout events will be managed by a single mousemove event\n\t\thelperEventName = (eventName === 'mouseover' || eventName === 'mouseout') ? 'mousemove' : eventName;\n\t\ttouchEventName = _getTouchEventName(helperEventName);\n\n\t\tfunction eventCallback(event) {\n\t\t\t// Cache current mouse position and redraw layers\n\t\t\teventCache.x = event.offsetX;\n\t\t\teventCache.y = event.offsetY;\n\t\t\teventCache.type = helperEventName;\n\t\t\teventCache.event = event;\n\t\t\t// Redraw layers on every trigger of the event; don't redraw if at\n\t\t\t// least one layer is draggable and there are no layers with\n\t\t\t// explicit mouseover/mouseout/mousemove events\n\t\t\tif (event.type !== 'mousemove' || data.redrawOnMousemove || data.drag.dragging) {\n\t\t\t\t$canvas.drawLayers({\n\t\t\t\t\tresetFire: true\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Prevent default event behavior\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\t// Ensure the event is not bound more than once\n\t\tif (!data.events[helperEventName]) {\n\t\t\t// Bind one canvas event which handles all layer events of that type\n\t\t\tif (touchEventName !== helperEventName) {\n\t\t\t\t$canvas.bind(helperEventName + '.jCanvas ' + touchEventName + '.jCanvas', eventCallback);\n\t\t\t} else {\n\t\t\t\t$canvas.bind(helperEventName + '.jCanvas', eventCallback);\n\t\t\t}\n\t\t\t// Prevent this event from being bound twice\n\t\t\tdata.events[helperEventName] = true;\n\t\t}\n\t};\n}\nfunction _createEvents(eventNames) {\n\tvar n;\n\tfor (n = 0; n < eventNames.length; n += 1) {\n\t\t_createEvent(eventNames[n]);\n\t}\n}\n// Populate jCanvas events object with some standard events\n_createEvents([\n\t'click',\n\t'dblclick',\n\t'mousedown',\n\t'mouseup',\n\t'mousemove',\n\t'mouseover',\n\t'mouseout',\n\t'touchstart',\n\t'touchmove',\n\t'touchend',\n\t'pointerdown',\n\t'pointermove',\n\t'pointerup',\n\t'contextmenu'\n]);\n\n// Check if event fires when a drawing is drawn\nfunction _detectEvents(canvas, ctx, params) {\n\tvar layer, data, eventCache, intersects,\n\t\ttransforms, x, y, angle;\n\n\t// Use the layer object stored by the given parameters object\n\tlayer = params._args;\n\t// Canvas must have event bindings\n\tif (layer) {\n\n\t\tdata = _getCanvasData(canvas);\n\t\teventCache = data.event;\n\t\tif (eventCache.x !== null && eventCache.y !== null) {\n\t\t\t// Respect user-defined pixel ratio\n\t\t\tx = eventCache.x * data.pixelRatio;\n\t\t\ty = eventCache.y * data.pixelRatio;\n\t\t\t// Determine if the given coordinates are in the current path\n\t\t\tintersects = ctx.isPointInPath(x, y) || (ctx.isPointInStroke && ctx.isPointInStroke(x, y));\n\t\t}\n\t\ttransforms = data.transforms;\n\n\t\t// Allow callback functions to retrieve the mouse coordinates\n\t\tlayer.eventX = eventCache.x;\n\t\tlayer.eventY = eventCache.y;\n\t\tlayer.event = eventCache.event;\n\n\t\t// Adjust coordinates to match current canvas transformation\n\n\t\t// Keep track of some transformation values\n\t\tangle = data.transforms.rotate;\n\t\tx = layer.eventX;\n\t\ty = layer.eventY;\n\n\t\tif (angle !== 0) {\n\t\t\t// Rotate coordinates if coordinate space has been rotated\n\t\t\tlayer._eventX = (x * cos(-angle)) - (y * sin(-angle));\n\t\t\tlayer._eventY = (y * cos(-angle)) + (x * sin(-angle));\n\t\t} else {\n\t\t\t// Otherwise, no calculations need to be made\n\t\t\tlayer._eventX = x;\n\t\t\tlayer._eventY = y;\n\t\t}\n\n\t\t// Scale coordinates\n\t\tlayer._eventX /= transforms.scaleX;\n\t\tlayer._eventY /= transforms.scaleY;\n\n\t\t// If layer intersects with cursor\n\t\tif (intersects) {\n\t\t\t// Add it to a list of layers that intersect with cursor\n\t\t\tdata.intersecting.push(layer);\n\t\t}\n\t\tlayer.intersects = Boolean(intersects);\n\t}\n}\n\n// Normalize offsetX and offsetY for all browsers\n$.event.fix = function (event) {\n\tvar offset, originalEvent, touches;\n\n\tevent = jQueryEventFix.call($.event, event);\n\toriginalEvent = event.originalEvent;\n\n\t// originalEvent does not exist for manually-triggered events\n\tif (originalEvent) {\n\n\t\ttouches = originalEvent.changedTouches;\n\n\t\t// If offsetX and offsetY are not supported, define them\n\t\tif (event.pageX !== undefined && event.offsetX === undefined) {\n\t\t\ttry {\n\t\t\t\toffset = $(event.currentTarget).offset();\n\t\t\t\tif (offset) {\n\t\t\t\t\tevent.offsetX = event.pageX - offset.left;\n\t\t\t\t\tevent.offsetY = event.pageY - offset.top;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Fail silently\n\t\t\t}\n\t\t} else if (touches) {\n\t\t\ttry {\n\t\t\t\t// Enable offsetX and offsetY for mobile devices\n\t\t\t\toffset = $(event.currentTarget).offset();\n\t\t\t\tif (offset) {\n\t\t\t\t\tevent.offsetX = touches[0].pageX - offset.left;\n\t\t\t\t\tevent.offsetY = touches[0].pageY - offset.top;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Fail silently\n\t\t\t}\n\t\t}\n\n\t}\n\treturn event;\n};\n\n/* Drawing API */\n\n// Map drawing names with their respective method names\nmaps.drawings = {\n\t'arc': 'drawArc',\n\t'bezier': 'drawBezier',\n\t'ellipse': 'drawEllipse',\n\t'function': 'draw',\n\t'image': 'drawImage',\n\t'line': 'drawLine',\n\t'path': 'drawPath',\n\t'polygon': 'drawPolygon',\n\t'slice': 'drawSlice',\n\t'quadratic': 'drawQuadratic',\n\t'rectangle': 'drawRect',\n\t'text': 'drawText',\n\t'vector': 'drawVector',\n\t'save': 'saveCanvas',\n\t'restore': 'restoreCanvas',\n\t'rotate': 'rotateCanvas',\n\t'scale': 'scaleCanvas',\n\t'translate': 'translateCanvas'\n};\n\n// Draws on canvas using a function\n$.fn.draw = function draw(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams = new jCanvasObject(args);\n\n\t// Draw using any other method\n\tif (maps.drawings[params.type] && params.type !== 'function') {\n\n\t\t$canvases[maps.drawings[params.type]](args);\n\n\t} else {\n\n\t\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t\tctx = _getContext($canvases[e]);\n\t\t\tif (ctx) {\n\n\t\t\t\tparams = new jCanvasObject(args);\n\t\t\t\t_addLayer($canvases[e], params, args, draw);\n\t\t\t\tif (params.visible) {\n\n\t\t\t\t\tif (params.fn) {\n\t\t\t\t\t\t// Call the given user-defined function\n\t\t\t\t\t\tparams.fn.call($canvases[e], ctx, params);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t}\n\treturn $canvases;\n};\n\n// Clears canvas\n$.fn.clearCanvas = function clearCanvas(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams = new jCanvasObject(args);\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tif (params.width === null || params.height === null) {\n\t\t\t\t// Clear entire canvas if width/height is not given\n\n\t\t\t\t// Reset current transformation temporarily to ensure that the entire canvas is cleared\n\t\t\t\tctx.save();\n\t\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\t\tctx.clearRect(0, 0, $canvases[e].width, $canvases[e].height);\n\t\t\t\tctx.restore();\n\n\t\t\t} else {\n\t\t\t\t// Otherwise, clear the defined section of the canvas\n\n\t\t\t\t// Transform clear rectangle\n\t\t\t\t_addLayer($canvases[e], params, args, clearCanvas);\n\t\t\t\t_transformShape($canvases[e], ctx, params, params.width, params.height);\n\t\t\t\tctx.clearRect(params.x - (params.width / 2), params.y - (params.height / 2), params.width, params.height);\n\t\t\t\t// Restore previous transformation\n\t\t\t\t_restoreTransform(ctx, params);\n\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n/* Transformation API */\n\n// Restores canvas\n$.fn.saveCanvas = function saveCanvas(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams, data, i;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, saveCanvas);\n\n\t\t\t// Restore a number of times using the given count\n\t\t\tfor (i = 0; i < params.count; i += 1) {\n\t\t\t\t_saveCanvas(ctx, data);\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Restores canvas\n$.fn.restoreCanvas = function restoreCanvas(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams, data, i;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, restoreCanvas);\n\n\t\t\t// Restore a number of times using the given count\n\t\t\tfor (i = 0; i < params.count; i += 1) {\n\t\t\t\t_restoreCanvas(ctx, data);\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Rotates canvas (internal)\nfunction _rotateCanvas(ctx, params, transforms) {\n\n\t// Get conversion factor for radians\n\tparams._toRad = (params.inDegrees ? (PI / 180) : 1);\n\n\t// Rotate canvas using shape as center of rotation\n\tctx.translate(params.x, params.y);\n\tctx.rotate(params.rotate * params._toRad);\n\tctx.translate(-params.x, -params.y);\n\n\t// If transformation data was given\n\tif (transforms) {\n\t\t// Update transformation data\n\t\ttransforms.rotate += (params.rotate * params._toRad);\n\t}\n}\n\n// Scales canvas (internal)\nfunction _scaleCanvas(ctx, params, transforms) {\n\n\t// Scale both the x- and y- axis using the 'scale' property\n\tif (params.scale !== 1) {\n\t\tparams.scaleX = params.scaleY = params.scale;\n\t}\n\n\t// Scale canvas using shape as center of rotation\n\tctx.translate(params.x, params.y);\n\tctx.scale(params.scaleX, params.scaleY);\n\tctx.translate(-params.x, -params.y);\n\n\t// If transformation data was given\n\tif (transforms) {\n\t\t// Update transformation data\n\t\ttransforms.scaleX *= params.scaleX;\n\t\ttransforms.scaleY *= params.scaleY;\n\t}\n}\n\n// Translates canvas (internal)\nfunction _translateCanvas(ctx, params, transforms) {\n\n\t// Translate both the x- and y-axis using the 'translate' property\n\tif (params.translate) {\n\t\tparams.translateX = params.translateY = params.translate;\n\t}\n\n\t// Translate canvas\n\tctx.translate(params.translateX, params.translateY);\n\n\t// If transformation data was given\n\tif (transforms) {\n\t\t// Update transformation data\n\t\ttransforms.translateX += params.translateX;\n\t\ttransforms.translateY += params.translateY;\n\t}\n}\n\n// Rotates canvas\n$.fn.rotateCanvas = function rotateCanvas(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams, data;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, rotateCanvas);\n\n\t\t\t// Autosave transformation state by default\n\t\t\tif (params.autosave) {\n\t\t\t\t// Automatically save transformation state by default\n\t\t\t\t_saveCanvas(ctx, data);\n\t\t\t}\n\t\t\t_rotateCanvas(ctx, params, data.transforms);\n\t\t}\n\n\t}\n\treturn $canvases;\n};\n\n// Scales canvas\n$.fn.scaleCanvas = function scaleCanvas(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams, data;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, scaleCanvas);\n\n\t\t\t// Autosave transformation state by default\n\t\t\tif (params.autosave) {\n\t\t\t\t// Automatically save transformation state by default\n\t\t\t\t_saveCanvas(ctx, data);\n\t\t\t}\n\t\t\t_scaleCanvas(ctx, params, data.transforms);\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Translates canvas\n$.fn.translateCanvas = function translateCanvas(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams, data;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, translateCanvas);\n\n\t\t\t// Autosave transformation state by default\n\t\t\tif (params.autosave) {\n\t\t\t\t// Automatically save transformation state by default\n\t\t\t\t_saveCanvas(ctx, data);\n\t\t\t}\n\t\t\t_translateCanvas(ctx, params, data.transforms);\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n/* Shape API */\n\n// Draws rectangle\n$.fn.drawRect = function drawRect(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams,\n\t\tx1, y1,\n\t\tx2, y2,\n\t\tr, temp;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawRect);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params, params.width, params.height);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tif (params.width && params.height) {\n\t\t\t\t\tx1 = params.x - (params.width / 2);\n\t\t\t\t\ty1 = params.y - (params.height / 2);\n\t\t\t\t\tr = abs(params.cornerRadius);\n\t\t\t\t\t// If corner radius is defined and is not zero\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\t// Draw rectangle with rounded corners if cornerRadius is defined\n\n\t\t\t\t\t\tx2 = params.x + (params.width / 2);\n\t\t\t\t\t\ty2 = params.y + (params.height / 2);\n\n\t\t\t\t\t\t// Handle negative width\n\t\t\t\t\t\tif (params.width < 0) {\n\t\t\t\t\t\t\ttemp = x1;\n\t\t\t\t\t\t\tx1 = x2;\n\t\t\t\t\t\t\tx2 = temp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Handle negative height\n\t\t\t\t\t\tif (params.height < 0) {\n\t\t\t\t\t\t\ttemp = y1;\n\t\t\t\t\t\t\ty1 = y2;\n\t\t\t\t\t\t\ty2 = temp;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Prevent over-rounded corners\n\t\t\t\t\t\tif ((x2 - x1) - (2 * r) < 0) {\n\t\t\t\t\t\t\tr = (x2 - x1) / 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((y2 - y1) - (2 * r) < 0) {\n\t\t\t\t\t\t\tr = (y2 - y1) / 2;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Draw rectangle\n\t\t\t\t\t\tctx.moveTo(x1 + r, y1);\n\t\t\t\t\t\tctx.lineTo(x2 - r, y1);\n\t\t\t\t\t\tctx.arc(x2 - r, y1 + r, r, 3 * PI / 2, PI * 2, false);\n\t\t\t\t\t\tctx.lineTo(x2, y2 - r);\n\t\t\t\t\t\tctx.arc(x2 - r, y2 - r, r, 0, PI / 2, false);\n\t\t\t\t\t\tctx.lineTo(x1 + r, y2);\n\t\t\t\t\t\tctx.arc(x1 + r, y2 - r, r, PI / 2, PI, false);\n\t\t\t\t\t\tctx.lineTo(x1, y1 + r);\n\t\t\t\t\t\tctx.arc(x1 + r, y1 + r, r, PI, 3 * PI / 2, false);\n\t\t\t\t\t\t// Always close path\n\t\t\t\t\t\tparams.closed = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Otherwise, draw rectangle with square corners\n\t\t\t\t\t\tctx.rect(x1, y1, params.width, params.height);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Close rectangle path\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\t\t\t}\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Retrieves a coterminal angle between 0 and 2pi for the given angle\nfunction _getCoterminal(angle) {\n\twhile (angle < 0) {\n\t\tangle += (2 * PI);\n\t}\n\treturn angle;\n}\n\n// Retrieves the x-coordinate for the given angle in a circle\nfunction _getArcX(params, angle) {\n\treturn params.x + (params.radius * cos(angle));\n}\n// Retrieves the y-coordinate for the given angle in a circle\nfunction _getArcY(params, angle) {\n\treturn params.y + (params.radius * sin(angle));\n}\n\n// Draws arc (internal)\nfunction _drawArc(canvas, ctx, params, path) {\n\tvar x1, y1, x2, y2,\n\t\tx3, y3, x4, y4,\n\t\toffsetX, offsetY,\n\t\tdiff;\n\n\t// Determine offset from dragging\n\tif (params === path) {\n\t\toffsetX = 0;\n\t\toffsetY = 0;\n\t} else {\n\t\toffsetX = params.x;\n\t\toffsetY = params.y;\n\t}\n\n\t// Convert default end angle to radians\n\tif (!path.inDegrees && path.end === 360) {\n\t\tpath.end = PI * 2;\n\t}\n\n\t// Convert angles to radians\n\tpath.start *= params._toRad;\n\tpath.end *= params._toRad;\n\t// Consider 0deg due north of arc\n\tpath.start -= (PI / 2);\n\tpath.end -= (PI / 2);\n\n\t// Ensure arrows are pointed correctly for CCW arcs\n\tdiff = PI / 180;\n\tif (path.ccw) {\n\t\tdiff *= -1;\n\t}\n\n\t// Calculate coordinates for start arrow\n\tx1 = _getArcX(path, path.start + diff);\n\ty1 = _getArcY(path, path.start + diff);\n\tx2 = _getArcX(path, path.start);\n\ty2 = _getArcY(path, path.start);\n\n\t_addStartArrow(\n\t\tcanvas, ctx,\n\t\tparams, path,\n\t\tx1, y1,\n\t\tx2, y2\n\t);\n\n\t// Draw arc\n\tctx.arc(path.x + offsetX, path.y + offsetY, path.radius, path.start, path.end, path.ccw);\n\n\t// Calculate coordinates for end arrow\n\tx3 = _getArcX(path, path.end + diff);\n\ty3 = _getArcY(path, path.end + diff);\n\tx4 = _getArcX(path, path.end);\n\ty4 = _getArcY(path, path.end);\n\n\t_addEndArrow(\n\t\tcanvas, ctx,\n\t\tparams, path,\n\t\tx4, y4,\n\t\tx3, y3\n\t);\n}\n\n// Draws arc or circle\n$.fn.drawArc = function drawArc(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawArc);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params, params.radius * 2);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\tctx.beginPath();\n\t\t\t\t_drawArc($canvases[e], ctx, params, params);\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Optionally close path\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Draws ellipse\n$.fn.drawEllipse = function drawEllipse(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams,\n\t\tcontrolW,\n\t\tcontrolH;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawEllipse);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params, params.width, params.height);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\t// Calculate control width and height\n\t\t\t\tcontrolW = params.width * (4 / 3);\n\t\t\t\tcontrolH = params.height;\n\n\t\t\t\t// Create ellipse using curves\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(params.x, params.y - (controlH / 2));\n\t\t\t\t// Left side\n\t\t\t\tctx.bezierCurveTo(params.x - (controlW / 2), params.y - (controlH / 2), params.x - (controlW / 2), params.y + (controlH / 2), params.x, params.y + (controlH / 2));\n\t\t\t\t// Right side\n\t\t\t\tctx.bezierCurveTo(params.x + (controlW / 2), params.y + (controlH / 2), params.x + (controlW / 2), params.y - (controlH / 2), params.x, params.y - (controlH / 2));\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Always close path\n\t\t\t\tparams.closed = true;\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Draws a regular (equal-angled) polygon\n$.fn.drawPolygon = function drawPolygon(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams,\n\t\ttheta, dtheta, hdtheta,\n\t\tapothem,\n\t\tx, y, i;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawPolygon);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params, params.radius * 2);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\t// Polygon's central angle\n\t\t\t\tdtheta = (2 * PI) / params.sides;\n\t\t\t\t// Half of dtheta\n\t\t\t\thdtheta = dtheta / 2;\n\t\t\t\t// Polygon's starting angle\n\t\t\t\ttheta = hdtheta + (PI / 2);\n\t\t\t\t// Distance from polygon's center to the middle of its side\n\t\t\t\tapothem = params.radius * cos(hdtheta);\n\n\t\t\t\t// Calculate path and draw\n\t\t\t\tctx.beginPath();\n\t\t\t\tfor (i = 0; i < params.sides; i += 1) {\n\n\t\t\t\t\t// Draw side of polygon\n\t\t\t\t\tx = params.x + (params.radius * cos(theta));\n\t\t\t\t\ty = params.y + (params.radius * sin(theta));\n\n\t\t\t\t\t// Plot point on polygon\n\t\t\t\t\tctx.lineTo(x, y);\n\n\t\t\t\t\t// Project side if chosen\n\t\t\t\t\tif (params.concavity) {\n\t\t\t\t\t\t// Sides are projected from the polygon's apothem\n\t\t\t\t\t\tx = params.x + ((apothem + (-apothem * params.concavity)) * cos(theta + hdtheta));\n\t\t\t\t\t\ty = params.y + ((apothem + (-apothem * params.concavity)) * sin(theta + hdtheta));\n\t\t\t\t\t\tctx.lineTo(x, y);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Increment theta by delta theta\n\t\t\t\t\ttheta += dtheta;\n\n\t\t\t\t}\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Always close path\n\t\t\t\tparams.closed = true;\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Draws pie-shaped slice\n$.fn.drawSlice = function drawSlice(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams,\n\t\tangle, dx, dy;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawSlice);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params, params.radius * 2);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\t// Perform extra calculations\n\n\t\t\t\t// Convert angles to radians\n\t\t\t\tparams.start *= params._toRad;\n\t\t\t\tparams.end *= params._toRad;\n\t\t\t\t// Consider 0deg at north of arc\n\t\t\t\tparams.start -= (PI / 2);\n\t\t\t\tparams.end -= (PI / 2);\n\n\t\t\t\t// Find positive equivalents of angles\n\t\t\t\tparams.start = _getCoterminal(params.start);\n\t\t\t\tparams.end = _getCoterminal(params.end);\n\t\t\t\t// Ensure start angle is less than end angle\n\t\t\t\tif (params.end < params.start) {\n\t\t\t\t\tparams.end += (2 * PI);\n\t\t\t\t}\n\n\t\t\t\t// Calculate angular position of slice\n\t\t\t\tangle = ((params.start + params.end) / 2);\n\n\t\t\t\t// Calculate ratios for slice's angle\n\t\t\t\tdx = (params.radius * params.spread * cos(angle));\n\t\t\t\tdy = (params.radius * params.spread * sin(angle));\n\n\t\t\t\t// Adjust position of slice\n\t\t\t\tparams.x += dx;\n\t\t\t\tparams.y += dy;\n\n\t\t\t\t// Draw slice\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(params.x, params.y, params.radius, params.start, params.end, params.ccw);\n\t\t\t\tctx.lineTo(params.x, params.y);\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Always close path\n\t\t\t\tparams.closed = true;\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n/* Path API */\n\n// Adds arrow to path using the given properties\nfunction _addArrow(canvas, ctx, params, path, x1, y1, x2, y2) {\n\tvar leftX, leftY,\n\t\trightX, rightY,\n\t\toffsetX, offsetY,\n\t\tangle;\n\n\t// If arrow radius is given and path is not closed\n\tif (path.arrowRadius && !params.closed) {\n\n\t\t// Calculate angle\n\t\tangle = atan2((y2 - y1), (x2 - x1));\n\t\t// Adjust angle correctly\n\t\tangle -= PI;\n\t\t// Calculate offset to place arrow at edge of path\n\t\toffsetX = (params.strokeWidth * cos(angle));\n\t\toffsetY = (params.strokeWidth * sin(angle));\n\n\t\t// Calculate coordinates for left half of arrow\n\t\tleftX = x2 + (path.arrowRadius * cos(angle + (path.arrowAngle / 2)));\n\t\tleftY = y2 + (path.arrowRadius * sin(angle + (path.arrowAngle / 2)));\n\t\t// Calculate coordinates for right half of arrow\n\t\trightX = x2 + (path.arrowRadius * cos(angle - (path.arrowAngle / 2)));\n\t\trightY = y2 + (path.arrowRadius * sin(angle - (path.arrowAngle / 2)));\n\n\t\t// Draw left half of arrow\n\t\tctx.moveTo(leftX - offsetX, leftY - offsetY);\n\t\tctx.lineTo(x2 - offsetX, y2 - offsetY);\n\t\t// Draw right half of arrow\n\t\tctx.lineTo(rightX - offsetX, rightY - offsetY);\n\n\t\t// Visually connect arrow to path\n\t\tctx.moveTo(x2 - offsetX, y2 - offsetY);\n\t\tctx.lineTo(x2 + offsetX, y2 + offsetY);\n\t\t// Move back to end of path\n\t\tctx.moveTo(x2, y2);\n\n\t}\n}\n\n// Optionally adds arrow to start of path\nfunction _addStartArrow(canvas, ctx, params, path, x1, y1, x2, y2) {\n\tif (!path._arrowAngleConverted) {\n\t\tpath.arrowAngle *= params._toRad;\n\t\tpath._arrowAngleConverted = true;\n\t}\n\tif (path.startArrow) {\n\t\t_addArrow(canvas, ctx, params, path, x1, y1, x2, y2);\n\t}\n}\n\n// Optionally adds arrow to end of path\nfunction _addEndArrow(canvas, ctx, params, path, x1, y1, x2, y2) {\n\tif (!path._arrowAngleConverted) {\n\t\tpath.arrowAngle *= params._toRad;\n\t\tpath._arrowAngleConverted = true;\n\t}\n\tif (path.endArrow) {\n\t\t_addArrow(canvas, ctx, params, path, x1, y1, x2, y2);\n\t}\n}\n\n// Draws line (internal)\nfunction _drawLine(canvas, ctx, params, path) {\n\tvar l,\n\t\tlx, ly;\n\tl = 2;\n\t_addStartArrow(\n\t\tcanvas, ctx,\n\t\tparams, path,\n\t\tpath.x2 + params.x,\n\t\tpath.y2 + params.y,\n\t\tpath.x1 + params.x,\n\t\tpath.y1 + params.y\n\t);\n\tif (path.x1 !== undefined && path.y1 !== undefined) {\n\t\tctx.moveTo(path.x1 + params.x, path.y1 + params.y);\n\t}\n\twhile (true) {\n\t\t// Calculate next coordinates\n\t\tlx = path['x' + l];\n\t\tly = path['y' + l];\n\t\t// If coordinates are given\n\t\tif (lx !== undefined && ly !== undefined) {\n\t\t\t// Draw next line\n\t\t\tctx.lineTo(lx + params.x, ly + params.y);\n\t\t\tl += 1;\n\t\t} else {\n\t\t\t// Otherwise, stop drawing\n\t\t\tbreak;\n\t\t}\n\t}\n\tl -= 1;\n\t// Optionally add arrows to path\n\t_addEndArrow(\n\t\tcanvas, ctx,\n\t\tparams,\n\t\tpath,\n\t\tpath['x' + (l - 1)] + params.x,\n\t\tpath['y' + (l - 1)] + params.y,\n\t\tpath['x' + l] + params.x,\n\t\tpath['y' + l] + params.y\n\t);\n}\n\n// Draws line\n$.fn.drawLine = function drawLine(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawLine);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\t// Draw each point\n\t\t\t\tctx.beginPath();\n\t\t\t\t_drawLine($canvases[e], ctx, params, params);\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Optionally close path\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Draws quadratic curve (internal)\nfunction _drawQuadratic(canvas, ctx, params, path) {\n\tvar l,\n\t\tlx, ly,\n\t\tlcx, lcy;\n\n\tl = 2;\n\n\t_addStartArrow(\n\t\tcanvas,\n\t\tctx,\n\t\tparams,\n\t\tpath,\n\t\tpath.cx1 + params.x,\n\t\tpath.cy1 + params.y,\n\t\tpath.x1 + params.x,\n\t\tpath.y1 + params.y\n\t);\n\n\tif (path.x1 !== undefined && path.y1 !== undefined) {\n\t\tctx.moveTo(path.x1 + params.x, path.y1 + params.y);\n\t}\n\twhile (true) {\n\t\t// Calculate next coordinates\n\t\tlx = path['x' + l];\n\t\tly = path['y' + l];\n\t\tlcx = path['cx' + (l - 1)];\n\t\tlcy = path['cy' + (l - 1)];\n\t\t// If coordinates are given\n\t\tif (lx !== undefined && ly !== undefined && lcx !== undefined && lcy !== undefined) {\n\t\t\t// Draw next curve\n\t\t\tctx.quadraticCurveTo(lcx + params.x, lcy + params.y, lx + params.x, ly + params.y);\n\t\t\tl += 1;\n\t\t} else {\n\t\t\t// Otherwise, stop drawing\n\t\t\tbreak;\n\t\t}\n\t}\n\tl -= 1;\n\t_addEndArrow(\n\t\tcanvas,\n\t\tctx,\n\t\tparams,\n\t\tpath,\n\t\tpath['cx' + (l - 1)] + params.x,\n\t\tpath['cy' + (l - 1)] + params.y,\n\t\tpath['x' + l] + params.x,\n\t\tpath['y' + l] + params.y\n\t);\n}\n\n// Draws quadratic curve\n$.fn.drawQuadratic = function drawQuadratic(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawQuadratic);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\t// Draw each point\n\t\t\t\tctx.beginPath();\n\t\t\t\t_drawQuadratic($canvases[e], ctx, params, params);\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Optionally close path\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Draws Bezier curve (internal)\nfunction _drawBezier(canvas, ctx, params, path) {\n\tvar l, lc,\n\t\tlx, ly,\n\t\tlcx1, lcy1,\n\t\tlcx2, lcy2;\n\n\tl = 2;\n\tlc = 1;\n\n\t_addStartArrow(\n\t\tcanvas,\n\t\tctx,\n\t\tparams,\n\t\tpath,\n\t\tpath.cx1 + params.x,\n\t\tpath.cy1 + params.y,\n\t\tpath.x1 + params.x,\n\t\tpath.y1 + params.y\n\t);\n\n\tif (path.x1 !== undefined && path.y1 !== undefined) {\n\t\tctx.moveTo(path.x1 + params.x, path.y1 + params.y);\n\t}\n\twhile (true) {\n\t\t// Calculate next coordinates\n\t\tlx = path['x' + l];\n\t\tly = path['y' + l];\n\t\tlcx1 = path['cx' + lc];\n\t\tlcy1 = path['cy' + lc];\n\t\tlcx2 = path['cx' + (lc + 1)];\n\t\tlcy2 = path['cy' + (lc + 1)];\n\t\t// If next coordinates are given\n\t\tif (lx !== undefined && ly !== undefined && lcx1 !== undefined && lcy1 !== undefined && lcx2 !== undefined && lcy2 !== undefined) {\n\t\t\t// Draw next curve\n\t\t\tctx.bezierCurveTo(lcx1 + params.x, lcy1 + params.y, lcx2 + params.x, lcy2 + params.y, lx + params.x, ly + params.y);\n\t\t\tl += 1;\n\t\t\tlc += 2;\n\t\t} else {\n\t\t\t// Otherwise, stop drawing\n\t\t\tbreak;\n\t\t}\n\t}\n\tl -= 1;\n\tlc -= 2;\n\t_addEndArrow(\n\t\tcanvas,\n\t\tctx,\n\t\tparams,\n\t\tpath,\n\t\tpath['cx' + (lc + 1)] + params.x,\n\t\tpath['cy' + (lc + 1)] + params.y,\n\t\tpath['x' + l] + params.x,\n\t\tpath['y' + l] + params.y\n\t);\n}\n\n// Draws Bezier curve\n$.fn.drawBezier = function drawBezier(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawBezier);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\t// Draw each point\n\t\t\t\tctx.beginPath();\n\t\t\t\t_drawBezier($canvases[e], ctx, params, params);\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Optionally close path\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Retrieves the x-coordinate for the given vector angle and length\nfunction _getVectorX(params, angle, length) {\n\tangle *= params._toRad;\n\tangle -= (PI / 2);\n\treturn (length * cos(angle));\n}\n// Retrieves the y-coordinate for the given vector angle and length\nfunction _getVectorY(params, angle, length) {\n\tangle *= params._toRad;\n\tangle -= (PI / 2);\n\treturn (length * sin(angle));\n}\n\n// Draws vector (internal) #2\nfunction _drawVector(canvas, ctx, params, path) {\n\tvar l, angle, length,\n\t\toffsetX, offsetY,\n\t\tx, y,\n\t\tx3, y3,\n\t\tx4, y4;\n\n\t// Determine offset from dragging\n\tif (params === path) {\n\t\toffsetX = 0;\n\t\toffsetY = 0;\n\t} else {\n\t\toffsetX = params.x;\n\t\toffsetY = params.y;\n\t}\n\n\tl = 1;\n\tx = x3 = x4 = path.x + offsetX;\n\ty = y3 = y4 = path.y + offsetY;\n\n\t_addStartArrow(\n\t\tcanvas, ctx,\n\t\tparams, path,\n\t\tx + _getVectorX(params, path.a1, path.l1),\n\t\ty + _getVectorY(params, path.a1, path.l1),\n\t\tx,\n\t\ty\n\t);\n\n\t// The vector starts at the given (x, y) coordinates\n\tif (path.x !== undefined && path.y !== undefined) {\n\t\tctx.moveTo(x, y);\n\t}\n\twhile (true) {\n\n\t\tangle = path['a' + l];\n\t\tlength = path['l' + l];\n\n\t\tif (angle !== undefined && length !== undefined) {\n\t\t\t// Convert the angle to radians with 0 degrees starting at north\n\t\t\t// Keep track of last two coordinates\n\t\t\tx3 = x4;\n\t\t\ty3 = y4;\n\t\t\t// Compute (x, y) coordinates from angle and length\n\t\t\tx4 += _getVectorX(params, angle, length);\n\t\t\ty4 += _getVectorY(params, angle, length);\n\t\t\tctx.lineTo(x4, y4);\n\t\t\tl += 1;\n\t\t} else {\n\t\t\t// Otherwise, stop drawing\n\t\t\tbreak;\n\t\t}\n\n\t}\n\t_addEndArrow(\n\t\tcanvas, ctx,\n\t\tparams, path,\n\t\tx3, y3,\n\t\tx4, y4\n\t);\n}\n\n// Draws vector\n$.fn.drawVector = function drawVector(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawVector);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\t// Draw each point\n\t\t\t\tctx.beginPath();\n\t\t\t\t_drawVector($canvases[e], ctx, params, params);\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Optionally close path\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Draws a path consisting of one or more subpaths\n$.fn.drawPath = function drawPath(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams,\n\t\tl, lp;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawPath);\n\t\t\tif (params.visible) {\n\n\t\t\t\t_transformShape($canvases[e], ctx, params);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\tctx.beginPath();\n\t\t\t\tl = 1;\n\t\t\t\twhile (true) {\n\t\t\t\t\tlp = params['p' + l];\n\t\t\t\t\tif (lp !== undefined) {\n\t\t\t\t\t\tlp = new jCanvasObject(lp);\n\t\t\t\t\t\tif (lp.type === 'line') {\n\t\t\t\t\t\t\t_drawLine($canvases[e], ctx, params, lp);\n\t\t\t\t\t\t} else if (lp.type === 'quadratic') {\n\t\t\t\t\t\t\t_drawQuadratic($canvases[e], ctx, params, lp);\n\t\t\t\t\t\t} else if (lp.type === 'bezier') {\n\t\t\t\t\t\t\t_drawBezier($canvases[e], ctx, params, lp);\n\t\t\t\t\t\t} else if (lp.type === 'vector') {\n\t\t\t\t\t\t\t_drawVector($canvases[e], ctx, params, lp);\n\t\t\t\t\t\t} else if (lp.type === 'arc') {\n\t\t\t\t\t\t\t_drawArc($canvases[e], ctx, params, lp);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tl += 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check for jCanvas events\n\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t// Optionally close path\n\t\t\t\t_closePath($canvases[e], ctx, params);\n\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n/* Text API */\n\n// Calculates font string and set it as the canvas font\nfunction _setCanvasFont(canvas, ctx, params) {\n\t// Otherwise, use the given font attributes\n\tif (!isNaN(Number(params.fontSize))) {\n\t\t// Give font size units if it doesn't have any\n\t\tparams.fontSize += 'px';\n\t}\n\t// Set font using given font properties\n\tctx.font = params.fontStyle + ' ' + params.fontSize + ' ' + params.fontFamily;\n}\n\n// Measures canvas text\nfunction _measureText(canvas, ctx, params, lines) {\n\tvar originalSize, curWidth, l,\n\t\tpropCache = caches.propCache;\n\n\t// Used cached width/height if possible\n\tif (propCache.text === params.text && propCache.fontStyle === params.fontStyle && propCache.fontSize === params.fontSize && propCache.fontFamily === params.fontFamily && propCache.maxWidth === params.maxWidth && propCache.lineHeight === params.lineHeight) {\n\n\t\tparams.width = propCache.width;\n\t\tparams.height = propCache.height;\n\n\t} else {\n\t\t// Calculate text dimensions only once\n\n\t\t// Calculate width of first line (for comparison)\n\t\tparams.width = ctx.measureText(lines[0]).width;\n\n\t\t// Get width of longest line\n\t\tfor (l = 1; l < lines.length; l += 1) {\n\n\t\t\tcurWidth = ctx.measureText(lines[l]).width;\n\t\t\t// Ensure text's width is the width of its longest line\n\t\t\tif (curWidth > params.width) {\n\t\t\t\tparams.width = curWidth;\n\t\t\t}\n\n\t\t}\n\n\t\t// Save original font size\n\t\toriginalSize = canvas.style.fontSize;\n\t\t// Temporarily set canvas font size to retrieve size in pixels\n\t\tcanvas.style.fontSize = params.fontSize;\n\t\t// Save text width and height in parameters object\n\t\tparams.height = parseFloat($.css(canvas, 'fontSize')) * lines.length * params.lineHeight;\n\t\t// Reset font size to original size\n\t\tcanvas.style.fontSize = originalSize;\n\t}\n}\n\n// Wraps a string of text within a defined width\nfunction _wrapText(ctx, params) {\n\tvar allText = String(params.text),\n\t\t// Maximum line width (optional)\n\t\tmaxWidth = params.maxWidth,\n\t\t// Lines created by manual line breaks (\\n)\n\t\tmanualLines = allText.split('\\n'),\n\t\t// All lines created manually and by wrapping\n\t\tallLines = [],\n\t\t// Other variables\n\t\tlines, line, l,\n\t\ttext, words, w;\n\n\t// Loop through manually-broken lines\n\tfor (l = 0; l < manualLines.length; l += 1) {\n\n\t\ttext = manualLines[l];\n\t\t// Split line into list of words\n\t\twords = text.split(' ');\n\t\tlines = [];\n\t\tline = '';\n\n\t\t// If text is short enough initially\n\t\t// Or, if the text consists of only one word\n\t\tif (words.length === 1 || ctx.measureText(text).width < maxWidth) {\n\n\t\t\t// No need to wrap text\n\t\t\tlines = [text];\n\n\t\t} else {\n\n\t\t\t// Wrap lines\n\t\t\tfor (w = 0; w < words.length; w += 1) {\n\n\t\t\t\t// Once line gets too wide, push word to next line\n\t\t\t\tif (ctx.measureText(line + words[w]).width > maxWidth) {\n\t\t\t\t\t// This check prevents empty lines from being created\n\t\t\t\t\tif (line !== '') {\n\t\t\t\t\t\tlines.push(line);\n\t\t\t\t\t}\n\t\t\t\t\t// Start new line and repeat process\n\t\t\t\t\tline = '';\n\t\t\t\t}\n\t\t\t\t// Add words to line until the line is too wide\n\t\t\t\tline += words[w];\n\t\t\t\t// Do not add a space after the last word\n\t\t\t\tif (w !== (words.length - 1)) {\n\t\t\t\t\tline += ' ';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The last word should always be pushed\n\t\t\tlines.push(line);\n\n\t\t}\n\t\t// Remove extra space at the end of each line\n\t\tallLines = allLines.concat(\n\t\t\tlines\n\t\t\t.join('\\n')\n\t\t\t.replace(/((\\n))|($)/gi, '$2')\n\t\t\t.split('\\n')\n\t\t);\n\n\t}\n\n\treturn allLines;\n}\n\n// Draws text on canvas\n$.fn.drawText = function drawText(args) {\n\tvar $canvases = this, e, ctx,\n\t\tparams, layer,\n\t\tlines, line, l,\n\t\tfontSize, constantCloseness = 500,\n\t\tnchars, chars, ch, c,\n\t\tx, y;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer($canvases[e], params, args, drawText);\n\t\t\tif (params.visible) {\n\n\t\t\t\t// Set text-specific properties\n\t\t\t\tctx.textBaseline = params.baseline;\n\t\t\t\tctx.textAlign = params.align;\n\n\t\t\t\t// Set canvas font using given properties\n\t\t\t\t_setCanvasFont($canvases[e], ctx, params);\n\n\t\t\t\tif (params.maxWidth !== null) {\n\t\t\t\t\t// Wrap text using an internal function\n\t\t\t\t\tlines = _wrapText(ctx, params);\n\t\t\t\t} else {\n\t\t\t\t\t// Convert string of text to list of lines\n\t\t\t\t\tlines = params.text\n\t\t\t\t\t.toString()\n\t\t\t\t\t.split('\\n');\n\t\t\t\t}\n\n\t\t\t\t// Calculate text's width and height\n\t\t\t\t_measureText($canvases[e], ctx, params, lines);\n\n\t\t\t\t// If text is a layer\n\t\t\t\tif (layer) {\n\t\t\t\t\t// Copy calculated width/height to layer object\n\t\t\t\t\tlayer.width = params.width;\n\t\t\t\t\tlayer.height = params.height;\n\t\t\t\t}\n\n\t\t\t\t_transformShape($canvases[e], ctx, params, params.width, params.height);\n\t\t\t\t_setGlobalProps($canvases[e], ctx, params);\n\n\t\t\t\t// Adjust text position to accomodate different horizontal alignments\n\t\t\t\tx = params.x;\n\t\t\t\tif (params.align === 'left') {\n\t\t\t\t\tif (params.respectAlign) {\n\t\t\t\t\t\t// Realign text to the left if chosen\n\t\t\t\t\t\tparams.x += params.width / 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Center text block by default\n\t\t\t\t\t\tx -= params.width / 2;\n\t\t\t\t\t}\n\t\t\t\t} else if (params.align === 'right') {\n\t\t\t\t\tif (params.respectAlign) {\n\t\t\t\t\t\t// Realign text to the right if chosen\n\t\t\t\t\t\tparams.x -= params.width / 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Center text block by default\n\t\t\t\t\t\tx += params.width / 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (params.radius) {\n\n\t\t\t\t\tfontSize = parseFloat(params.fontSize);\n\n\t\t\t\t\t// Greater values move clockwise\n\t\t\t\t\tif (params.letterSpacing === null) {\n\t\t\t\t\t\tparams.letterSpacing = fontSize / constantCloseness;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Loop through each line of text\n\t\t\t\t\tfor (l = 0; l < lines.length; l += 1) {\n\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\tctx.translate(params.x, params.y);\n\t\t\t\t\t\tline = lines[l];\n\t\t\t\t\t\tif (params.flipArcText) {\n\t\t\t\t\t\t\tchars = line.split('');\n\t\t\t\t\t\t\tchars.reverse();\n\t\t\t\t\t\t\tline = chars.join('');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnchars = line.length;\n\t\t\t\t\t\tctx.rotate(-(PI * params.letterSpacing * (nchars - 1)) / 2);\n\t\t\t\t\t\t// Loop through characters on each line\n\t\t\t\t\t\tfor (c = 0; c < nchars; c += 1) {\n\t\t\t\t\t\t\tch = line[c];\n\t\t\t\t\t\t\t// If character is not the first character\n\t\t\t\t\t\t\tif (c !== 0) {\n\t\t\t\t\t\t\t\t// Rotate character onto arc\n\t\t\t\t\t\t\t\tctx.rotate(PI * params.letterSpacing);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\t\tctx.translate(0, -params.radius);\n\t\t\t\t\t\t\tif (params.flipArcText) {\n\t\t\t\t\t\t\t\tctx.scale(-1, -1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.fillText(ch, 0, 0);\n\t\t\t\t\t\t\t// Prevent extra shadow created by stroke (but only when fill is present)\n\t\t\t\t\t\t\tif (params.fillStyle !== 'transparent') {\n\t\t\t\t\t\t\t\tctx.shadowColor = 'transparent';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (params.strokeWidth !== 0) {\n\t\t\t\t\t\t\t\t// Only stroke if the stroke is not 0\n\t\t\t\t\t\t\t\tctx.strokeText(ch, 0, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparams.radius -= fontSize;\n\t\t\t\t\t\tparams.letterSpacing += fontSize / (constantCloseness * 2 * PI);\n\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Draw each line of text separately\n\t\t\t\t\tfor (l = 0; l < lines.length; l += 1) {\n\t\t\t\t\t\tline = lines[l];\n\t\t\t\t\t\t// Add line offset to center point, but subtract some to center everything\n\t\t\t\t\t\ty = params.y + (l * params.height / lines.length) - (((lines.length - 1) * params.height / lines.length) / 2);\n\n\t\t\t\t\t\tctx.shadowColor = params.shadowColor;\n\n\t\t\t\t\t\t// Fill & stroke text\n\t\t\t\t\t\tctx.fillText(line, x, y);\n\t\t\t\t\t\t// Prevent extra shadow created by stroke (but only when fill is present)\n\t\t\t\t\t\tif (params.fillStyle !== 'transparent') {\n\t\t\t\t\t\t\tctx.shadowColor = 'transparent';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (params.strokeWidth !== 0) {\n\t\t\t\t\t\t\t// Only stroke if the stroke is not 0\n\t\t\t\t\t\t\tctx.strokeText(line, x, y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Adjust bounding box according to text baseline\n\t\t\t\ty = 0;\n\t\t\t\tif (params.baseline === 'top') {\n\t\t\t\t\ty += params.height / 2;\n\t\t\t\t} else if (params.baseline === 'bottom') {\n\t\t\t\t\ty -= params.height / 2;\n\t\t\t\t}\n\n\t\t\t\t// Detect jCanvas events\n\t\t\t\tif (params._event) {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.rect(\n\t\t\t\t\t\tparams.x - (params.width / 2),\n\t\t\t\t\t\tparams.y - (params.height / 2) + y,\n\t\t\t\t\t\tparams.width,\n\t\t\t\t\t\tparams.height\n\t\t\t\t\t);\n\t\t\t\t\t_detectEvents($canvases[e], ctx, params);\n\t\t\t\t\t// Close path and configure masking\n\t\t\t\t\tctx.closePath();\n\t\t\t\t}\n\t\t\t\t_restoreTransform(ctx, params);\n\n\t\t\t}\n\t\t}\n\t}\n\t// Cache jCanvas parameters object for efficiency\n\tcaches.propCache = params;\n\treturn $canvases;\n};\n\n// Measures text width/height using the given parameters\n$.fn.measureText = function measureText(args) {\n\tvar $canvases = this, ctx,\n\t\tparams, lines;\n\n\t// Attempt to retrieve layer\n\tparams = $canvases.getLayer(args);\n\t// If layer does not exist or if returned object is not a jCanvas layer\n\tif (!params || (params && !params._layer)) {\n\t\tparams = new jCanvasObject(args);\n\t}\n\n\tctx = _getContext($canvases[0]);\n\tif (ctx) {\n\n\t\t// Set canvas font using given properties\n\t\t_setCanvasFont($canvases[0], ctx, params);\n\t\t// Calculate width and height of text\n\t\tif (params.maxWidth !== null) {\n\t\t\tlines = _wrapText(ctx, params);\n\t\t} else {\n\t\t\tlines = params.text.split('\\n');\n\t\t}\n\t\t_measureText($canvases[0], ctx, params, lines);\n\n\n\t}\n\n\treturn params;\n};\n\n/* Image API */\n\n// Draws image on canvas\n$.fn.drawImage = function drawImage(args) {\n\tvar $canvases = this, canvas, e, ctx, data,\n\t\tparams, layer,\n\t\timg, imgCtx, source,\n\t\timageCache = caches.imageCache;\n\n\t// Draw image function\n\tfunction draw(canvas, ctx, data, params, layer) {\n\n\t\t// If width and sWidth are not defined, use image width\n\t\tif (params.width === null && params.sWidth === null) {\n\t\t\tparams.width = params.sWidth = img.width;\n\t\t}\n\t\t// If width and sHeight are not defined, use image height\n\t\tif (params.height === null && params.sHeight === null) {\n\t\t\tparams.height = params.sHeight = img.height;\n\t\t}\n\n\t\t// Ensure image layer's width and height are accurate\n\t\tif (layer) {\n\t\t\tlayer.width = params.width;\n\t\t\tlayer.height = params.height;\n\t\t}\n\n\t\t// Only crop image if all cropping properties are given\n\t\tif (params.sWidth !== null && params.sHeight !== null && params.sx !== null && params.sy !== null) {\n\n\t\t\t// If width is not defined, use the given sWidth\n\t\t\tif (params.width === null) {\n\t\t\t\tparams.width = params.sWidth;\n\t\t\t}\n\t\t\t// If height is not defined, use the given sHeight\n\t\t\tif (params.height === null) {\n\t\t\t\tparams.height = params.sHeight;\n\t\t\t}\n\n\t\t\t// Optionally crop from top-left corner of region\n\t\t\tif (params.cropFromCenter) {\n\t\t\t\tparams.sx += params.sWidth / 2;\n\t\t\t\tparams.sy += params.sHeight / 2;\n\t\t\t}\n\n\t\t\t// Ensure cropped region does not escape image boundaries\n\n\t\t\t// Top\n\t\t\tif ((params.sy - (params.sHeight / 2)) < 0) {\n\t\t\t\tparams.sy = (params.sHeight / 2);\n\t\t\t}\n\t\t\t// Bottom\n\t\t\tif ((params.sy + (params.sHeight / 2)) > img.height) {\n\t\t\t\tparams.sy = img.height - (params.sHeight / 2);\n\t\t\t}\n\t\t\t// Left\n\t\t\tif ((params.sx - (params.sWidth / 2)) < 0) {\n\t\t\t\tparams.sx = (params.sWidth / 2);\n\t\t\t}\n\t\t\t// Right\n\t\t\tif ((params.sx + (params.sWidth / 2)) > img.width) {\n\t\t\t\tparams.sx = img.width - (params.sWidth / 2);\n\t\t\t}\n\n\t\t\t_transformShape(canvas, ctx, params, params.width, params.height);\n\t\t\t_setGlobalProps(canvas, ctx, params);\n\n\t\t\t// Draw image\n\t\t\tctx.drawImage(\n\t\t\t\timg,\n\t\t\t\tparams.sx - (params.sWidth / 2),\n\t\t\t\tparams.sy - (params.sHeight / 2),\n\t\t\t\tparams.sWidth,\n\t\t\t\tparams.sHeight,\n\t\t\t\tparams.x - (params.width / 2),\n\t\t\t\tparams.y - (params.height / 2),\n\t\t\t\tparams.width,\n\t\t\t\tparams.height\n\t\t\t);\n\n\t\t} else {\n\t\t\t// Show entire image if no crop region is defined\n\n\t\t\t_transformShape(canvas, ctx, params, params.width, params.height);\n\t\t\t_setGlobalProps(canvas, ctx, params);\n\n\t\t\t// Draw image on canvas\n\t\t\tctx.drawImage(\n\t\t\t\timg,\n\t\t\t\tparams.x - (params.width / 2),\n\t\t\t\tparams.y - (params.height / 2),\n\t\t\t\tparams.width,\n\t\t\t\tparams.height\n\t\t\t);\n\n\t\t}\n\n\t\t// Draw invisible rectangle to allow for events and masking\n\t\tctx.beginPath();\n\t\tctx.rect(\n\t\t\tparams.x - (params.width / 2),\n\t\t\tparams.y - (params.height / 2),\n\t\t\tparams.width,\n\t\t\tparams.height\n\t\t);\n\t\t// Check for jCanvas events\n\t\t_detectEvents(canvas, ctx, params);\n\t\t// Close path and configure masking\n\t\tctx.closePath();\n\t\t_restoreTransform(ctx, params);\n\t\t_enableMasking(ctx, data, params);\n\t}\n\t// On load function\n\tfunction onload(canvas, ctx, data, params, layer) {\n\t\treturn function () {\n\t\t\tvar $canvas = $(canvas);\n\t\t\tdraw(canvas, ctx, data, params, layer);\n\t\t\tif (params.layer) {\n\t\t\t\t// Trigger 'load' event for layers\n\t\t\t\t_triggerLayerEvent($canvas, data, layer, 'load');\n\t\t\t} else if (params.load) {\n\t\t\t\t// Run 'load' callback for non-layers\n\t\t\t\tparams.load.call($canvas[0], layer);\n\t\t\t}\n\t\t\t// Continue drawing successive layers after this image layer has loaded\n\t\t\tif (params.layer) {\n\t\t\t\t// Store list of previous masks for each layer\n\t\t\t\tlayer._masks = data.transforms.masks.slice(0);\n\t\t\t\tif (params._next) {\n\t\t\t\t\t// Draw successive layers\n\t\t\t\t\tvar complete = data.drawLayersComplete;\n\t\t\t\t\tdelete data.drawLayersComplete;\n\t\t\t\t\t$canvas.drawLayers({\n\t\t\t\t\t\tclear: false,\n\t\t\t\t\t\tresetFire: true,\n\t\t\t\t\t\tindex: params._next,\n\t\t\t\t\t\tcomplete: complete\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tcanvas = $canvases[e];\n\t\tctx = _getContext($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tdata = _getCanvasData($canvases[e]);\n\t\t\tparams = new jCanvasObject(args);\n\t\t\tlayer = _addLayer($canvases[e], params, args, drawImage);\n\t\t\tif (params.visible) {\n\n\t\t\t\t// Cache the given source\n\t\t\t\tsource = params.source;\n\n\t\t\t\timgCtx = source.getContext;\n\t\t\t\tif (source.src || imgCtx) {\n\t\t\t\t\t// Use image or canvas element if given\n\t\t\t\t\timg = source;\n\t\t\t\t} else if (source) {\n\t\t\t\t\tif (imageCache[source] && imageCache[source].complete) {\n\t\t\t\t\t\t// Get the image element from the cache if possible\n\t\t\t\t\t\timg = imageCache[source];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Otherwise, get the image from the given source URL\n\t\t\t\t\t\timg = new Image();\n\t\t\t\t\t\t// If source URL is not a data URL\n\t\t\t\t\t\tif (!source.match(/^data:/i)) {\n\t\t\t\t\t\t\t// Set crossOrigin for this image\n\t\t\t\t\t\t\timg.crossOrigin = params.crossOrigin;\n\t\t\t\t\t\t}\n\t\t\t\t\t\timg.src = source;\n\t\t\t\t\t\t// Save image in cache for improved performance\n\t\t\t\t\t\timageCache[source] = img;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (img) {\n\t\t\t\t\tif (img.complete || imgCtx) {\n\t\t\t\t\t\t// Draw image if already loaded\n\t\t\t\t\t\tonload(canvas, ctx, data, params, layer)();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Otherwise, draw image when it loads\n\t\t\t\t\t\timg.onload = onload(canvas, ctx, data, params, layer);\n\t\t\t\t\t\t// Fix onload() bug in IE9\n\t\t\t\t\t\timg.src = img.src;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Creates a canvas pattern object\n$.fn.createPattern = function createPattern(args) {\n\tvar $canvases = this, ctx,\n\t\tparams,\n\t\timg, imgCtx,\n\t\tpattern, source;\n\n\t// Function to be called when pattern loads\n\tfunction onload() {\n\t\t// Create pattern\n\t\tpattern = ctx.createPattern(img, params.repeat);\n\t\t// Run callback function if defined\n\t\tif (params.load) {\n\t\t\tparams.load.call($canvases[0], pattern);\n\t\t}\n\t}\n\n\tctx = _getContext($canvases[0]);\n\tif (ctx) {\n\n\t\tparams = new jCanvasObject(args);\n\n\t\t// Cache the given source\n\t\tsource = params.source;\n\n\t\t// Draw when image is loaded (if load() callback function is defined)\n\n\t\tif (isFunction(source)) {\n\t\t\t// Draw pattern using function if given\n\n\t\t\timg = $('<canvas />')[0];\n\t\t\timg.width = params.width;\n\t\t\timg.height = params.height;\n\t\t\timgCtx = _getContext(img);\n\t\t\tsource.call(img, imgCtx);\n\t\t\tonload();\n\n\t\t} else {\n\t\t\t// Otherwise, draw pattern using source image\n\n\t\t\timgCtx = source.getContext;\n\t\t\tif (source.src || imgCtx) {\n\t\t\t\t// Use image element if given\n\t\t\t\timg = source;\n\t\t\t} else {\n\t\t\t\t// Use URL if given to get the image\n\t\t\t\timg = new Image();\n\t\t\t\t// If source URL is not a data URL\n\t\t\t\tif (!source.match(/^data:/i)) {\n\t\t\t\t\t// Set crossOrigin for this image\n\t\t\t\t\timg.crossOrigin = params.crossOrigin;\n\t\t\t\t}\n\t\t\t\timg.src = source;\n\t\t\t}\n\n\t\t\t// Create pattern if already loaded\n\t\t\tif (img.complete || imgCtx) {\n\t\t\t\tonload();\n\t\t\t} else {\n\t\t\t\timg.onload = onload;\n\t\t\t\t// Fix onload() bug in IE9\n\t\t\t\timg.src = img.src;\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\tpattern = null;\n\n\t}\n\treturn pattern;\n};\n\n// Creates a canvas gradient object\n$.fn.createGradient = function createGradient(args) {\n\tvar $canvases = this, ctx,\n\t\tparams,\n\t\tgradient,\n\t\tstops = [], nstops,\n\t\tstart, end,\n\t\ti, a, n, p;\n\n\tparams = new jCanvasObject(args);\n\tctx = _getContext($canvases[0]);\n\tif (ctx) {\n\n\t\t// Gradient coordinates must be defined\n\t\tparams.x1 = params.x1 || 0;\n\t\tparams.y1 = params.y1 || 0;\n\t\tparams.x2 = params.x2 || 0;\n\t\tparams.y2 = params.y2 || 0;\n\n\t\tif (params.r1 !== null && params.r2 !== null) {\n\t\t\t// Create radial gradient if chosen\n\t\t\tgradient = ctx.createRadialGradient(params.x1, params.y1, params.r1, params.x2, params.y2, params.r2);\n\t\t} else {\n\t\t\t// Otherwise, create a linear gradient by default\n\t\t\tgradient = ctx.createLinearGradient(params.x1, params.y1, params.x2, params.y2);\n\t\t}\n\n\t\t// Count number of color stops\n\t\tfor (i = 1; params['c' + i] !== undefined; i += 1) {\n\t\t\tif (params['s' + i] !== undefined) {\n\t\t\t\tstops.push(params['s' + i]);\n\t\t\t} else {\n\t\t\t\tstops.push(null);\n\t\t\t}\n\t\t}\n\t\tnstops = stops.length;\n\n\t\t// Define start stop if not already defined\n\t\tif (stops[0] === null) {\n\t\t\tstops[0] = 0;\n\t\t}\n\t\t// Define end stop if not already defined\n\t\tif (stops[nstops - 1] === null) {\n\t\t\tstops[nstops - 1] = 1;\n\t\t}\n\n\t\t// Loop through color stops to fill in the blanks\n\t\tfor (i = 0; i < nstops; i += 1) {\n\t\t\t// A progression, in this context, is defined as all of the color stops between and including two known color stops\n\n\t\t\tif (stops[i] !== null) {\n\t\t\t\t// Start a new progression if stop is a number\n\n\t\t\t\t// Number of stops in current progression\n\t\t\t\tn = 1;\n\t\t\t\t// Current iteration in current progression\n\t\t\t\tp = 0;\n\t\t\t\tstart = stops[i];\n\n\t\t\t\t// Look ahead to find end stop\n\t\t\t\tfor (a = (i + 1); a < nstops; a += 1) {\n\t\t\t\t\tif (stops[a] !== null) {\n\t\t\t\t\t\t// If this future stop is a number, make it the end stop for this progression\n\t\t\t\t\t\tend = stops[a];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Otherwise, keep looking ahead\n\t\t\t\t\t\tn += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Ensure start stop is not greater than end stop\n\t\t\t\tif (start > end) {\n\t\t\t\t\tstops[a] = stops[i];\n\t\t\t\t}\n\n\t\t\t} else if (stops[i] === null) {\n\t\t\t\t// Calculate stop if not initially given\n\t\t\t\tp += 1;\n\t\t\t\tstops[i] = start + (p * ((end - start) / n));\n\t\t\t}\n\t\t\t// Add color stop to gradient object\n\t\t\tgradient.addColorStop(stops[i], params['c' + (i + 1)]);\n\t\t}\n\n\t} else {\n\t\tgradient = null;\n\t}\n\treturn gradient;\n};\n\n// Manipulates pixels on the canvas\n$.fn.setPixels = function setPixels(args) {\n\tvar $canvases = this,\n\t\tcanvas, e, ctx, canvasData,\n\t\tparams,\n\t\tpx,\n\t\timgData, pixelData, i, len;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\tcanvas = $canvases[e];\n\t\tctx = _getContext(canvas);\n\t\tcanvasData = _getCanvasData($canvases[e]);\n\t\tif (ctx) {\n\n\t\t\tparams = new jCanvasObject(args);\n\t\t\t_addLayer(canvas, params, args, setPixels);\n\t\t\t_transformShape($canvases[e], ctx, params, params.width, params.height);\n\n\t\t\t// Use entire canvas of x, y, width, or height is not defined\n\t\t\tif (params.width === null || params.height === null) {\n\t\t\t\tparams.width = canvas.width;\n\t\t\t\tparams.height = canvas.height;\n\t\t\t\tparams.x = params.width / 2;\n\t\t\t\tparams.y = params.height / 2;\n\t\t\t}\n\n\t\t\tif (params.width !== 0 && params.height !== 0) {\n\t\t\t\t// Only set pixels if width and height are not zero\n\n\t\t\t\timgData = ctx.getImageData(\n\t\t\t\t\t(params.x - (params.width / 2)) * canvasData.pixelRatio,\n\t\t\t\t\t(params.y - (params.height / 2)) * canvasData.pixelRatio,\n\t\t\t\t\tparams.width * canvasData.pixelRatio,\n\t\t\t\t\tparams.height * canvasData.pixelRatio\n\t\t\t\t);\n\t\t\t\tpixelData = imgData.data;\n\t\t\t\tlen = pixelData.length;\n\n\t\t\t\t// Loop through pixels with the \"each\" callback function\n\t\t\t\tif (params.each) {\n\t\t\t\t\tfor (i = 0; i < len; i += 4) {\n\t\t\t\t\t\tpx = {\n\t\t\t\t\t\t\tr: pixelData[i],\n\t\t\t\t\t\t\tg: pixelData[i + 1],\n\t\t\t\t\t\t\tb: pixelData[i + 2],\n\t\t\t\t\t\t\ta: pixelData[i + 3]\n\t\t\t\t\t\t};\n\t\t\t\t\t\tparams.each.call(canvas, px, params);\n\t\t\t\t\t\tpixelData[i] = px.r;\n\t\t\t\t\t\tpixelData[i + 1] = px.g;\n\t\t\t\t\t\tpixelData[i + 2] = px.b;\n\t\t\t\t\t\tpixelData[i + 3] = px.a;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Put pixels on canvas\n\t\t\t\tctx.putImageData(\n\t\t\t\t\timgData,\n\t\t\t\t\t(params.x - (params.width / 2)) * canvasData.pixelRatio,\n\t\t\t\t\t(params.y - (params.height / 2)) * canvasData.pixelRatio\n\t\t\t\t);\n\t\t\t\t// Restore transformation\n\t\t\t\tctx.restore();\n\n\t\t\t}\n\n\t\t}\n\t}\n\treturn $canvases;\n};\n\n// Retrieves canvas image as data URL\n$.fn.getCanvasImage = function getCanvasImage(type, quality) {\n\tvar $canvases = this, canvas,\n\t\tdataURL = null;\n\tif ($canvases.length !== 0) {\n\t\tcanvas = $canvases[0];\n\t\tif (canvas.toDataURL) {\n\t\t\t// JPEG quality defaults to 1\n\t\t\tif (quality === undefined) {\n\t\t\t\tquality = 1;\n\t\t\t}\n\t\t\tdataURL = canvas.toDataURL('image/' + type, quality);\n\t\t}\n\t}\n\treturn dataURL;\n};\n\n// Scales canvas based on the device's pixel ratio\n$.fn.detectPixelRatio = function detectPixelRatio(callback) {\n\tvar $canvases = this,\n\t\tcanvas, e, ctx,\n\t\tdevicePixelRatio, backingStoreRatio, ratio,\n\t\toldWidth, oldHeight,\n\t\tdata;\n\n\tfor (e = 0; e < $canvases.length; e += 1) {\n\t\t// Get canvas and its associated data\n\t\tcanvas = $canvases[e];\n\t\tctx = _getContext(canvas);\n\t\tdata = _getCanvasData($canvases[e]);\n\n\t\t// If canvas has not already been scaled with this method\n\t\tif (!data.scaled) {\n\n\t\t\t// Determine device pixel ratios\n\t\t\tdevicePixelRatio = window.devicePixelRatio || 1;\n\t\t\tbackingStoreRatio = ctx.webkitBackingStorePixelRatio ||\n\t\t\t\tctx.mozBackingStorePixelRatio ||\n\t\t\t\tctx.msBackingStorePixelRatio ||\n\t\t\t\tctx.oBackingStorePixelRatio ||\n\t\t\t\tctx.backingStorePixelRatio || 1;\n\n\t\t\t// Calculate general ratio based on the two given ratios\n\t\t\tratio = devicePixelRatio / backingStoreRatio;\n\n\t\t\tif (ratio !== 1) {\n\t\t\t\t// Scale canvas relative to ratio\n\n\t\t\t\t// Get the current canvas dimensions for future use\n\t\t\t\toldWidth = canvas.width;\n\t\t\t\toldHeight = canvas.height;\n\n\t\t\t\t// Resize canvas relative to the determined ratio\n\t\t\t\tcanvas.width = oldWidth * ratio;\n\t\t\t\tcanvas.height = oldHeight * ratio;\n\n\t\t\t\t// Scale canvas back to original dimensions via CSS\n\t\t\t\tcanvas.style.width = oldWidth + 'px';\n\t\t\t\tcanvas.style.height = oldHeight + 'px';\n\n\t\t\t\t// Scale context to counter the manual scaling of canvas\n\t\t\t\tctx.scale(ratio, ratio);\n\n\t\t\t}\n\n\t\t\t// Set pixel ratio on canvas data object\n\t\t\tdata.pixelRatio = ratio;\n\t\t\t// Ensure that this method can only be called once for any given canvas\n\t\t\tdata.scaled = true;\n\n\t\t\t// Call the given callback function with the ratio as its only argument\n\t\t\tif (callback) {\n\t\t\t\tcallback.call(canvas, ratio);\n\t\t\t}\n\n\t\t}\n\n\t}\n\treturn $canvases;\n};\n\n// Clears the jCanvas cache\njCanvas.clearCache = function clearCache() {\n\tvar cacheName;\n\tfor (cacheName in caches) {\n\t\tif (Object.prototype.hasOwnProperty.call(caches, cacheName)) {\n\t\t\tcaches[cacheName] = {};\n\t\t}\n\t}\n};\n\n// Enable canvas feature detection with $.support\n$.support.canvas = ($('<canvas />')[0].getContext !== undefined);\n\n// Export jCanvas functions\nextendObject(jCanvas, {\n\tdefaults: defaults,\n\tsetGlobalProps: _setGlobalProps,\n\ttransformShape: _transformShape,\n\tdetectEvents: _detectEvents,\n\tclosePath: _closePath,\n\tsetCanvasFont: _setCanvasFont,\n\tmeasureText: _measureText\n});\n$.jCanvas = jCanvas;\n$.jCanvasObject = jCanvasObject;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/vue/node_modules/jcanvas/dist/jcanvas.js\n");

/***/ })

}]);